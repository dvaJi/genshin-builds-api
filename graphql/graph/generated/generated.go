// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/dvaJi/genshin-builds-api/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Artifact struct {
		Circlet   func(childComplexity int) int
		Flower    func(childComplexity int) int
		FourPc    func(childComplexity int) int
		Goblet    func(childComplexity int) int
		ID        func(childComplexity int) int
		MaxRarity func(childComplexity int) int
		MinRarity func(childComplexity int) int
		Name      func(childComplexity int) int
		OnePc     func(childComplexity int) int
		Plume     func(childComplexity int) int
		Sands     func(childComplexity int) int
		TwoPc     func(childComplexity int) int
	}

	ArtifactSet struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	Ascension struct {
		Ascension func(childComplexity int) int
		Cost      func(childComplexity int) int
		Level     func(childComplexity int) int
		MatFour   func(childComplexity int) int
		MatOne    func(childComplexity int) int
		MatThree  func(childComplexity int) int
		MatTwo    func(childComplexity int) int
	}

	AscensionMaterial struct {
		Amount func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
		Rarity func(childComplexity int) int
	}

	Bait struct {
		Craft       func(childComplexity int) int
		Description func(childComplexity int) int
		Fish        func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
	}

	CalculationCharacterResult struct {
		ExpWasted func(childComplexity int) int
		Items     func(childComplexity int) int
	}

	CalculationItemResult struct {
		Amount func(childComplexity int) int
		ID     func(childComplexity int) int
		Img    func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	Character struct {
		Affiliation     func(childComplexity int) int
		Ascension       func(childComplexity int) int
		Birthday        func(childComplexity int) int
		Constellation   func(childComplexity int) int
		Constellations  func(childComplexity int) int
		Cv              func(childComplexity int) int
		Description     func(childComplexity int) int
		Domain          func(childComplexity int) int
		Element         func(childComplexity int) int
		Gender          func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		Passives        func(childComplexity int) int
		Rarity          func(childComplexity int) int
		Region          func(childComplexity int) int
		Skills          func(childComplexity int) int
		Substat         func(childComplexity int) int
		TalentMaterials func(childComplexity int) int
		Title           func(childComplexity int) int
		WeaponType      func(childComplexity int) int
	}

	CharacterFood struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	CharacterVoice struct {
		Chinese  func(childComplexity int) int
		English  func(childComplexity int) int
		Japanese func(childComplexity int) int
		Korean   func(childComplexity int) int
	}

	CommonMaterial struct {
		Craft       func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	CommonMaterialCraft struct {
		Cost  func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CommonMaterialItem struct {
		Amount func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	Constellation struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Level       func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	Craft struct {
		Items  func(childComplexity int) int
		Result func(childComplexity int) int
	}

	CraftItem struct {
		Amount func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	CraftJewel struct {
		Cost  func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CraftPotion struct {
		Cost  func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CraftTalentLvlUp struct {
		Cost  func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CraftWeaponPrimary struct {
		Cost  func(childComplexity int) int
		Items func(childComplexity int) int
	}

	CraftWeaponSecondary struct {
		Cost  func(childComplexity int) int
		Items func(childComplexity int) int
	}

	ElementalStoneMaterial struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	ExpMaterial struct {
		Description func(childComplexity int) int
		Exp         func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
	}

	Fish struct {
		Bait        func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	FishBait struct {
		Amount func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	FishingRod struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	Food struct {
		Description func(childComplexity int) int
		DishType    func(childComplexity int) int
		ID          func(childComplexity int) int
		Ingredients func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Results     func(childComplexity int) int
	}

	FoodResult struct {
		Delicious  func(childComplexity int) int
		Normal     func(childComplexity int) int
		Special    func(childComplexity int) int
		Suspicious func(childComplexity int) int
	}

	FoodSpecial struct {
		Character   func(childComplexity int) int
		Description func(childComplexity int) int
		Effect      func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	FoodType struct {
		Description func(childComplexity int) int
		Effect      func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	Ingredient struct {
		Amount func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	Ingredients struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Processing  func(childComplexity int) int
		Recipes     func(childComplexity int) int
	}

	Item struct {
		Amount func(childComplexity int) int
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	JewelMaterial struct {
		Convert     func(childComplexity int) int
		Craft       func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	LocalMaterial struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	Passive struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Level       func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	Potion struct {
		Craft       func(childComplexity int) int
		Description func(childComplexity int) int
		Effect      func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
	}

	Query struct {
		Artifact                 func(childComplexity int, lang string, id string) int
		Artifacts                func(childComplexity int, lang string) int
		Baits                    func(childComplexity int, lang string) int
		CalculateCharacterLevel  func(childComplexity int, characterID string, lang string, params model.CalculateCharacterParams) int
		CalculateWeaponLevel     func(childComplexity int, lang string, weaponID string, params model.CalculateWeaponParams) int
		Character                func(childComplexity int, lang string, id string) int
		CharacterExpMaterials    func(childComplexity int, lang string) int
		Characters               func(childComplexity int, lang string) int
		CommonMaterial           func(childComplexity int, lang string, id string) int
		CommonMaterials          func(childComplexity int, lang string) int
		ElementalStoneMaterial   func(childComplexity int, lang string, id string) int
		ElementalStoneMaterials  func(childComplexity int, lang string) int
		Fish                     func(childComplexity int, lang string) int
		FishingRods              func(childComplexity int, lang string) int
		Food                     func(childComplexity int, lang string) int
		Ingredients              func(childComplexity int, lang string) int
		JewelMaterials           func(childComplexity int, lang string) int
		LocalMaterials           func(childComplexity int, lang string) int
		Potions                  func(childComplexity int, lang string) int
		TalentLvlUpMaterials     func(childComplexity int, lang string) int
		Weapon                   func(childComplexity int, lang string, id string) int
		WeaponExpMaterials       func(childComplexity int, lang string) int
		WeaponPrimaryMaterials   func(childComplexity int, lang string) int
		WeaponSecondaryMaterials func(childComplexity int, lang string) int
		Weapons                  func(childComplexity int, lang string) int
	}

	Recipe struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	SimpleBait struct {
		ID     func(childComplexity int) int
		Name   func(childComplexity int) int
		Rarity func(childComplexity int) int
	}

	Skill struct {
		Attributes  func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Info        func(childComplexity int) int
		Name        func(childComplexity int) int
	}

	SkillAttribute struct {
		Label  func(childComplexity int) int
		Values func(childComplexity int) int
	}

	StatLevel struct {
		Ascension func(childComplexity int) int
		Level     func(childComplexity int) int
		Primary   func(childComplexity int) int
		Secondary func(childComplexity int) int
	}

	TalentLvlUpMaterial struct {
		Craft       func(childComplexity int) int
		Days        func(childComplexity int) int
		Description func(childComplexity int) int
		Domain      func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	TalentMaterial struct {
		Cost  func(childComplexity int) int
		Items func(childComplexity int) int
		Level func(childComplexity int) int
	}

	Weapon struct {
		Ascensions  func(childComplexity int) int
		Bonus       func(childComplexity int) int
		Description func(childComplexity int) int
		Domain      func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Passive     func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Refinements func(childComplexity int) int
		Stats       func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	WeaponAscension struct {
		Ascension func(childComplexity int) int
		Cost      func(childComplexity int) int
		Level     func(childComplexity int) int
		Materials func(childComplexity int) int
	}

	WeaponPrimaryMaterial struct {
		Craft       func(childComplexity int) int
		Days        func(childComplexity int) int
		Description func(childComplexity int) int
		Domain      func(childComplexity int) int
		ID          func(childComplexity int) int
		Location    func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	WeaponRefinement struct {
		Desc       func(childComplexity int) int
		Refinement func(childComplexity int) int
	}

	WeaponSecondaryMaterial struct {
		Craft       func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Rarity      func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	WeaponStat struct {
		Levels    func(childComplexity int) int
		Primary   func(childComplexity int) int
		Secondary func(childComplexity int) int
	}
}

type QueryResolver interface {
	Artifacts(ctx context.Context, lang string) ([]*model.Artifact, error)
	Artifact(ctx context.Context, lang string, id string) (*model.Artifact, error)
	Characters(ctx context.Context, lang string) ([]*model.Character, error)
	Character(ctx context.Context, lang string, id string) (*model.Character, error)
	CharacterExpMaterials(ctx context.Context, lang string) ([]*model.ExpMaterial, error)
	CommonMaterials(ctx context.Context, lang string) ([]*model.CommonMaterial, error)
	CommonMaterial(ctx context.Context, lang string, id string) (*model.CommonMaterial, error)
	ElementalStoneMaterials(ctx context.Context, lang string) ([]*model.ElementalStoneMaterial, error)
	ElementalStoneMaterial(ctx context.Context, lang string, id string) (*model.ElementalStoneMaterial, error)
	Fish(ctx context.Context, lang string) ([]*model.Fish, error)
	FishingRods(ctx context.Context, lang string) ([]*model.FishingRod, error)
	Baits(ctx context.Context, lang string) ([]*model.Bait, error)
	Food(ctx context.Context, lang string) ([]*model.Food, error)
	Ingredients(ctx context.Context, lang string) ([]*model.Ingredient, error)
	JewelMaterials(ctx context.Context, lang string) ([]*model.JewelMaterial, error)
	LocalMaterials(ctx context.Context, lang string) ([]*model.LocalMaterial, error)
	Potions(ctx context.Context, lang string) ([]*model.Potion, error)
	TalentLvlUpMaterials(ctx context.Context, lang string) ([]*model.TalentLvlUpMaterial, error)
	WeaponPrimaryMaterials(ctx context.Context, lang string) ([]*model.WeaponPrimaryMaterial, error)
	WeaponSecondaryMaterials(ctx context.Context, lang string) ([]*model.WeaponSecondaryMaterial, error)
	WeaponExpMaterials(ctx context.Context, lang string) ([]*model.ExpMaterial, error)
	Weapons(ctx context.Context, lang string) ([]*model.Weapon, error)
	Weapon(ctx context.Context, lang string, id string) (*model.Weapon, error)
	CalculateCharacterLevel(ctx context.Context, characterID string, lang string, params model.CalculateCharacterParams) (*model.CalculationCharacterResult, error)
	CalculateWeaponLevel(ctx context.Context, lang string, weaponID string, params model.CalculateWeaponParams) ([]*model.CalculationItemResult, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Artifact.circlet":
		if e.complexity.Artifact.Circlet == nil {
			break
		}

		return e.complexity.Artifact.Circlet(childComplexity), true

	case "Artifact.flower":
		if e.complexity.Artifact.Flower == nil {
			break
		}

		return e.complexity.Artifact.Flower(childComplexity), true

	case "Artifact.four_pc":
		if e.complexity.Artifact.FourPc == nil {
			break
		}

		return e.complexity.Artifact.FourPc(childComplexity), true

	case "Artifact.goblet":
		if e.complexity.Artifact.Goblet == nil {
			break
		}

		return e.complexity.Artifact.Goblet(childComplexity), true

	case "Artifact.id":
		if e.complexity.Artifact.ID == nil {
			break
		}

		return e.complexity.Artifact.ID(childComplexity), true

	case "Artifact.max_rarity":
		if e.complexity.Artifact.MaxRarity == nil {
			break
		}

		return e.complexity.Artifact.MaxRarity(childComplexity), true

	case "Artifact.min_rarity":
		if e.complexity.Artifact.MinRarity == nil {
			break
		}

		return e.complexity.Artifact.MinRarity(childComplexity), true

	case "Artifact.name":
		if e.complexity.Artifact.Name == nil {
			break
		}

		return e.complexity.Artifact.Name(childComplexity), true

	case "Artifact.one_pc":
		if e.complexity.Artifact.OnePc == nil {
			break
		}

		return e.complexity.Artifact.OnePc(childComplexity), true

	case "Artifact.plume":
		if e.complexity.Artifact.Plume == nil {
			break
		}

		return e.complexity.Artifact.Plume(childComplexity), true

	case "Artifact.sands":
		if e.complexity.Artifact.Sands == nil {
			break
		}

		return e.complexity.Artifact.Sands(childComplexity), true

	case "Artifact.two_pc":
		if e.complexity.Artifact.TwoPc == nil {
			break
		}

		return e.complexity.Artifact.TwoPc(childComplexity), true

	case "ArtifactSet.description":
		if e.complexity.ArtifactSet.Description == nil {
			break
		}

		return e.complexity.ArtifactSet.Description(childComplexity), true

	case "ArtifactSet.id":
		if e.complexity.ArtifactSet.ID == nil {
			break
		}

		return e.complexity.ArtifactSet.ID(childComplexity), true

	case "ArtifactSet.name":
		if e.complexity.ArtifactSet.Name == nil {
			break
		}

		return e.complexity.ArtifactSet.Name(childComplexity), true

	case "Ascension.ascension":
		if e.complexity.Ascension.Ascension == nil {
			break
		}

		return e.complexity.Ascension.Ascension(childComplexity), true

	case "Ascension.cost":
		if e.complexity.Ascension.Cost == nil {
			break
		}

		return e.complexity.Ascension.Cost(childComplexity), true

	case "Ascension.level":
		if e.complexity.Ascension.Level == nil {
			break
		}

		return e.complexity.Ascension.Level(childComplexity), true

	case "Ascension.mat_four":
		if e.complexity.Ascension.MatFour == nil {
			break
		}

		return e.complexity.Ascension.MatFour(childComplexity), true

	case "Ascension.mat_one":
		if e.complexity.Ascension.MatOne == nil {
			break
		}

		return e.complexity.Ascension.MatOne(childComplexity), true

	case "Ascension.mat_three":
		if e.complexity.Ascension.MatThree == nil {
			break
		}

		return e.complexity.Ascension.MatThree(childComplexity), true

	case "Ascension.mat_two":
		if e.complexity.Ascension.MatTwo == nil {
			break
		}

		return e.complexity.Ascension.MatTwo(childComplexity), true

	case "AscensionMaterial.amount":
		if e.complexity.AscensionMaterial.Amount == nil {
			break
		}

		return e.complexity.AscensionMaterial.Amount(childComplexity), true

	case "AscensionMaterial.id":
		if e.complexity.AscensionMaterial.ID == nil {
			break
		}

		return e.complexity.AscensionMaterial.ID(childComplexity), true

	case "AscensionMaterial.name":
		if e.complexity.AscensionMaterial.Name == nil {
			break
		}

		return e.complexity.AscensionMaterial.Name(childComplexity), true

	case "AscensionMaterial.rarity":
		if e.complexity.AscensionMaterial.Rarity == nil {
			break
		}

		return e.complexity.AscensionMaterial.Rarity(childComplexity), true

	case "Bait.craft":
		if e.complexity.Bait.Craft == nil {
			break
		}

		return e.complexity.Bait.Craft(childComplexity), true

	case "Bait.description":
		if e.complexity.Bait.Description == nil {
			break
		}

		return e.complexity.Bait.Description(childComplexity), true

	case "Bait.fish":
		if e.complexity.Bait.Fish == nil {
			break
		}

		return e.complexity.Bait.Fish(childComplexity), true

	case "Bait.id":
		if e.complexity.Bait.ID == nil {
			break
		}

		return e.complexity.Bait.ID(childComplexity), true

	case "Bait.name":
		if e.complexity.Bait.Name == nil {
			break
		}

		return e.complexity.Bait.Name(childComplexity), true

	case "Bait.rarity":
		if e.complexity.Bait.Rarity == nil {
			break
		}

		return e.complexity.Bait.Rarity(childComplexity), true

	case "CalculationCharacterResult.expWasted":
		if e.complexity.CalculationCharacterResult.ExpWasted == nil {
			break
		}

		return e.complexity.CalculationCharacterResult.ExpWasted(childComplexity), true

	case "CalculationCharacterResult.items":
		if e.complexity.CalculationCharacterResult.Items == nil {
			break
		}

		return e.complexity.CalculationCharacterResult.Items(childComplexity), true

	case "CalculationItemResult.amount":
		if e.complexity.CalculationItemResult.Amount == nil {
			break
		}

		return e.complexity.CalculationItemResult.Amount(childComplexity), true

	case "CalculationItemResult.id":
		if e.complexity.CalculationItemResult.ID == nil {
			break
		}

		return e.complexity.CalculationItemResult.ID(childComplexity), true

	case "CalculationItemResult.img":
		if e.complexity.CalculationItemResult.Img == nil {
			break
		}

		return e.complexity.CalculationItemResult.Img(childComplexity), true

	case "CalculationItemResult.name":
		if e.complexity.CalculationItemResult.Name == nil {
			break
		}

		return e.complexity.CalculationItemResult.Name(childComplexity), true

	case "Character.affiliation":
		if e.complexity.Character.Affiliation == nil {
			break
		}

		return e.complexity.Character.Affiliation(childComplexity), true

	case "Character.ascension":
		if e.complexity.Character.Ascension == nil {
			break
		}

		return e.complexity.Character.Ascension(childComplexity), true

	case "Character.birthday":
		if e.complexity.Character.Birthday == nil {
			break
		}

		return e.complexity.Character.Birthday(childComplexity), true

	case "Character.constellation":
		if e.complexity.Character.Constellation == nil {
			break
		}

		return e.complexity.Character.Constellation(childComplexity), true

	case "Character.constellations":
		if e.complexity.Character.Constellations == nil {
			break
		}

		return e.complexity.Character.Constellations(childComplexity), true

	case "Character.cv":
		if e.complexity.Character.Cv == nil {
			break
		}

		return e.complexity.Character.Cv(childComplexity), true

	case "Character.description":
		if e.complexity.Character.Description == nil {
			break
		}

		return e.complexity.Character.Description(childComplexity), true

	case "Character.domain":
		if e.complexity.Character.Domain == nil {
			break
		}

		return e.complexity.Character.Domain(childComplexity), true

	case "Character.element":
		if e.complexity.Character.Element == nil {
			break
		}

		return e.complexity.Character.Element(childComplexity), true

	case "Character.gender":
		if e.complexity.Character.Gender == nil {
			break
		}

		return e.complexity.Character.Gender(childComplexity), true

	case "Character.id":
		if e.complexity.Character.ID == nil {
			break
		}

		return e.complexity.Character.ID(childComplexity), true

	case "Character.name":
		if e.complexity.Character.Name == nil {
			break
		}

		return e.complexity.Character.Name(childComplexity), true

	case "Character.passives":
		if e.complexity.Character.Passives == nil {
			break
		}

		return e.complexity.Character.Passives(childComplexity), true

	case "Character.rarity":
		if e.complexity.Character.Rarity == nil {
			break
		}

		return e.complexity.Character.Rarity(childComplexity), true

	case "Character.region":
		if e.complexity.Character.Region == nil {
			break
		}

		return e.complexity.Character.Region(childComplexity), true

	case "Character.skills":
		if e.complexity.Character.Skills == nil {
			break
		}

		return e.complexity.Character.Skills(childComplexity), true

	case "Character.substat":
		if e.complexity.Character.Substat == nil {
			break
		}

		return e.complexity.Character.Substat(childComplexity), true

	case "Character.talent_materials":
		if e.complexity.Character.TalentMaterials == nil {
			break
		}

		return e.complexity.Character.TalentMaterials(childComplexity), true

	case "Character.title":
		if e.complexity.Character.Title == nil {
			break
		}

		return e.complexity.Character.Title(childComplexity), true

	case "Character.weapon_type":
		if e.complexity.Character.WeaponType == nil {
			break
		}

		return e.complexity.Character.WeaponType(childComplexity), true

	case "CharacterFood.id":
		if e.complexity.CharacterFood.ID == nil {
			break
		}

		return e.complexity.CharacterFood.ID(childComplexity), true

	case "CharacterFood.name":
		if e.complexity.CharacterFood.Name == nil {
			break
		}

		return e.complexity.CharacterFood.Name(childComplexity), true

	case "CharacterVoice.chinese":
		if e.complexity.CharacterVoice.Chinese == nil {
			break
		}

		return e.complexity.CharacterVoice.Chinese(childComplexity), true

	case "CharacterVoice.english":
		if e.complexity.CharacterVoice.English == nil {
			break
		}

		return e.complexity.CharacterVoice.English(childComplexity), true

	case "CharacterVoice.japanese":
		if e.complexity.CharacterVoice.Japanese == nil {
			break
		}

		return e.complexity.CharacterVoice.Japanese(childComplexity), true

	case "CharacterVoice.korean":
		if e.complexity.CharacterVoice.Korean == nil {
			break
		}

		return e.complexity.CharacterVoice.Korean(childComplexity), true

	case "CommonMaterial.craft":
		if e.complexity.CommonMaterial.Craft == nil {
			break
		}

		return e.complexity.CommonMaterial.Craft(childComplexity), true

	case "CommonMaterial.description":
		if e.complexity.CommonMaterial.Description == nil {
			break
		}

		return e.complexity.CommonMaterial.Description(childComplexity), true

	case "CommonMaterial.id":
		if e.complexity.CommonMaterial.ID == nil {
			break
		}

		return e.complexity.CommonMaterial.ID(childComplexity), true

	case "CommonMaterial.name":
		if e.complexity.CommonMaterial.Name == nil {
			break
		}

		return e.complexity.CommonMaterial.Name(childComplexity), true

	case "CommonMaterial.rarity":
		if e.complexity.CommonMaterial.Rarity == nil {
			break
		}

		return e.complexity.CommonMaterial.Rarity(childComplexity), true

	case "CommonMaterial.source":
		if e.complexity.CommonMaterial.Source == nil {
			break
		}

		return e.complexity.CommonMaterial.Source(childComplexity), true

	case "CommonMaterialCraft.cost":
		if e.complexity.CommonMaterialCraft.Cost == nil {
			break
		}

		return e.complexity.CommonMaterialCraft.Cost(childComplexity), true

	case "CommonMaterialCraft.items":
		if e.complexity.CommonMaterialCraft.Items == nil {
			break
		}

		return e.complexity.CommonMaterialCraft.Items(childComplexity), true

	case "CommonMaterialItem.amount":
		if e.complexity.CommonMaterialItem.Amount == nil {
			break
		}

		return e.complexity.CommonMaterialItem.Amount(childComplexity), true

	case "CommonMaterialItem.id":
		if e.complexity.CommonMaterialItem.ID == nil {
			break
		}

		return e.complexity.CommonMaterialItem.ID(childComplexity), true

	case "CommonMaterialItem.name":
		if e.complexity.CommonMaterialItem.Name == nil {
			break
		}

		return e.complexity.CommonMaterialItem.Name(childComplexity), true

	case "Constellation.description":
		if e.complexity.Constellation.Description == nil {
			break
		}

		return e.complexity.Constellation.Description(childComplexity), true

	case "Constellation.id":
		if e.complexity.Constellation.ID == nil {
			break
		}

		return e.complexity.Constellation.ID(childComplexity), true

	case "Constellation.level":
		if e.complexity.Constellation.Level == nil {
			break
		}

		return e.complexity.Constellation.Level(childComplexity), true

	case "Constellation.name":
		if e.complexity.Constellation.Name == nil {
			break
		}

		return e.complexity.Constellation.Name(childComplexity), true

	case "Craft.items":
		if e.complexity.Craft.Items == nil {
			break
		}

		return e.complexity.Craft.Items(childComplexity), true

	case "Craft.result":
		if e.complexity.Craft.Result == nil {
			break
		}

		return e.complexity.Craft.Result(childComplexity), true

	case "CraftItem.amount":
		if e.complexity.CraftItem.Amount == nil {
			break
		}

		return e.complexity.CraftItem.Amount(childComplexity), true

	case "CraftItem.id":
		if e.complexity.CraftItem.ID == nil {
			break
		}

		return e.complexity.CraftItem.ID(childComplexity), true

	case "CraftItem.name":
		if e.complexity.CraftItem.Name == nil {
			break
		}

		return e.complexity.CraftItem.Name(childComplexity), true

	case "CraftJewel.cost":
		if e.complexity.CraftJewel.Cost == nil {
			break
		}

		return e.complexity.CraftJewel.Cost(childComplexity), true

	case "CraftJewel.items":
		if e.complexity.CraftJewel.Items == nil {
			break
		}

		return e.complexity.CraftJewel.Items(childComplexity), true

	case "CraftPotion.cost":
		if e.complexity.CraftPotion.Cost == nil {
			break
		}

		return e.complexity.CraftPotion.Cost(childComplexity), true

	case "CraftPotion.items":
		if e.complexity.CraftPotion.Items == nil {
			break
		}

		return e.complexity.CraftPotion.Items(childComplexity), true

	case "CraftTalentLvlUp.cost":
		if e.complexity.CraftTalentLvlUp.Cost == nil {
			break
		}

		return e.complexity.CraftTalentLvlUp.Cost(childComplexity), true

	case "CraftTalentLvlUp.items":
		if e.complexity.CraftTalentLvlUp.Items == nil {
			break
		}

		return e.complexity.CraftTalentLvlUp.Items(childComplexity), true

	case "CraftWeaponPrimary.cost":
		if e.complexity.CraftWeaponPrimary.Cost == nil {
			break
		}

		return e.complexity.CraftWeaponPrimary.Cost(childComplexity), true

	case "CraftWeaponPrimary.items":
		if e.complexity.CraftWeaponPrimary.Items == nil {
			break
		}

		return e.complexity.CraftWeaponPrimary.Items(childComplexity), true

	case "CraftWeaponSecondary.cost":
		if e.complexity.CraftWeaponSecondary.Cost == nil {
			break
		}

		return e.complexity.CraftWeaponSecondary.Cost(childComplexity), true

	case "CraftWeaponSecondary.items":
		if e.complexity.CraftWeaponSecondary.Items == nil {
			break
		}

		return e.complexity.CraftWeaponSecondary.Items(childComplexity), true

	case "ElementalStoneMaterial.description":
		if e.complexity.ElementalStoneMaterial.Description == nil {
			break
		}

		return e.complexity.ElementalStoneMaterial.Description(childComplexity), true

	case "ElementalStoneMaterial.id":
		if e.complexity.ElementalStoneMaterial.ID == nil {
			break
		}

		return e.complexity.ElementalStoneMaterial.ID(childComplexity), true

	case "ElementalStoneMaterial.name":
		if e.complexity.ElementalStoneMaterial.Name == nil {
			break
		}

		return e.complexity.ElementalStoneMaterial.Name(childComplexity), true

	case "ElementalStoneMaterial.rarity":
		if e.complexity.ElementalStoneMaterial.Rarity == nil {
			break
		}

		return e.complexity.ElementalStoneMaterial.Rarity(childComplexity), true

	case "ElementalStoneMaterial.source":
		if e.complexity.ElementalStoneMaterial.Source == nil {
			break
		}

		return e.complexity.ElementalStoneMaterial.Source(childComplexity), true

	case "ExpMaterial.description":
		if e.complexity.ExpMaterial.Description == nil {
			break
		}

		return e.complexity.ExpMaterial.Description(childComplexity), true

	case "ExpMaterial.exp":
		if e.complexity.ExpMaterial.Exp == nil {
			break
		}

		return e.complexity.ExpMaterial.Exp(childComplexity), true

	case "ExpMaterial.id":
		if e.complexity.ExpMaterial.ID == nil {
			break
		}

		return e.complexity.ExpMaterial.ID(childComplexity), true

	case "ExpMaterial.name":
		if e.complexity.ExpMaterial.Name == nil {
			break
		}

		return e.complexity.ExpMaterial.Name(childComplexity), true

	case "ExpMaterial.rarity":
		if e.complexity.ExpMaterial.Rarity == nil {
			break
		}

		return e.complexity.ExpMaterial.Rarity(childComplexity), true

	case "Fish.bait":
		if e.complexity.Fish.Bait == nil {
			break
		}

		return e.complexity.Fish.Bait(childComplexity), true

	case "Fish.description":
		if e.complexity.Fish.Description == nil {
			break
		}

		return e.complexity.Fish.Description(childComplexity), true

	case "Fish.id":
		if e.complexity.Fish.ID == nil {
			break
		}

		return e.complexity.Fish.ID(childComplexity), true

	case "Fish.name":
		if e.complexity.Fish.Name == nil {
			break
		}

		return e.complexity.Fish.Name(childComplexity), true

	case "Fish.rarity":
		if e.complexity.Fish.Rarity == nil {
			break
		}

		return e.complexity.Fish.Rarity(childComplexity), true

	case "Fish.source":
		if e.complexity.Fish.Source == nil {
			break
		}

		return e.complexity.Fish.Source(childComplexity), true

	case "FishBait.amount":
		if e.complexity.FishBait.Amount == nil {
			break
		}

		return e.complexity.FishBait.Amount(childComplexity), true

	case "FishBait.id":
		if e.complexity.FishBait.ID == nil {
			break
		}

		return e.complexity.FishBait.ID(childComplexity), true

	case "FishBait.name":
		if e.complexity.FishBait.Name == nil {
			break
		}

		return e.complexity.FishBait.Name(childComplexity), true

	case "FishingRod.description":
		if e.complexity.FishingRod.Description == nil {
			break
		}

		return e.complexity.FishingRod.Description(childComplexity), true

	case "FishingRod.id":
		if e.complexity.FishingRod.ID == nil {
			break
		}

		return e.complexity.FishingRod.ID(childComplexity), true

	case "FishingRod.name":
		if e.complexity.FishingRod.Name == nil {
			break
		}

		return e.complexity.FishingRod.Name(childComplexity), true

	case "FishingRod.rarity":
		if e.complexity.FishingRod.Rarity == nil {
			break
		}

		return e.complexity.FishingRod.Rarity(childComplexity), true

	case "FishingRod.source":
		if e.complexity.FishingRod.Source == nil {
			break
		}

		return e.complexity.FishingRod.Source(childComplexity), true

	case "Food.description":
		if e.complexity.Food.Description == nil {
			break
		}

		return e.complexity.Food.Description(childComplexity), true

	case "Food.dish_type":
		if e.complexity.Food.DishType == nil {
			break
		}

		return e.complexity.Food.DishType(childComplexity), true

	case "Food.id":
		if e.complexity.Food.ID == nil {
			break
		}

		return e.complexity.Food.ID(childComplexity), true

	case "Food.ingredients":
		if e.complexity.Food.Ingredients == nil {
			break
		}

		return e.complexity.Food.Ingredients(childComplexity), true

	case "Food.name":
		if e.complexity.Food.Name == nil {
			break
		}

		return e.complexity.Food.Name(childComplexity), true

	case "Food.rarity":
		if e.complexity.Food.Rarity == nil {
			break
		}

		return e.complexity.Food.Rarity(childComplexity), true

	case "Food.results":
		if e.complexity.Food.Results == nil {
			break
		}

		return e.complexity.Food.Results(childComplexity), true

	case "FoodResult.delicious":
		if e.complexity.FoodResult.Delicious == nil {
			break
		}

		return e.complexity.FoodResult.Delicious(childComplexity), true

	case "FoodResult.normal":
		if e.complexity.FoodResult.Normal == nil {
			break
		}

		return e.complexity.FoodResult.Normal(childComplexity), true

	case "FoodResult.special":
		if e.complexity.FoodResult.Special == nil {
			break
		}

		return e.complexity.FoodResult.Special(childComplexity), true

	case "FoodResult.suspicious":
		if e.complexity.FoodResult.Suspicious == nil {
			break
		}

		return e.complexity.FoodResult.Suspicious(childComplexity), true

	case "FoodSpecial.character":
		if e.complexity.FoodSpecial.Character == nil {
			break
		}

		return e.complexity.FoodSpecial.Character(childComplexity), true

	case "FoodSpecial.description":
		if e.complexity.FoodSpecial.Description == nil {
			break
		}

		return e.complexity.FoodSpecial.Description(childComplexity), true

	case "FoodSpecial.effect":
		if e.complexity.FoodSpecial.Effect == nil {
			break
		}

		return e.complexity.FoodSpecial.Effect(childComplexity), true

	case "FoodSpecial.name":
		if e.complexity.FoodSpecial.Name == nil {
			break
		}

		return e.complexity.FoodSpecial.Name(childComplexity), true

	case "FoodType.description":
		if e.complexity.FoodType.Description == nil {
			break
		}

		return e.complexity.FoodType.Description(childComplexity), true

	case "FoodType.effect":
		if e.complexity.FoodType.Effect == nil {
			break
		}

		return e.complexity.FoodType.Effect(childComplexity), true

	case "FoodType.name":
		if e.complexity.FoodType.Name == nil {
			break
		}

		return e.complexity.FoodType.Name(childComplexity), true

	case "Ingredient.amount":
		if e.complexity.Ingredient.Amount == nil {
			break
		}

		return e.complexity.Ingredient.Amount(childComplexity), true

	case "Ingredient.id":
		if e.complexity.Ingredient.ID == nil {
			break
		}

		return e.complexity.Ingredient.ID(childComplexity), true

	case "Ingredient.name":
		if e.complexity.Ingredient.Name == nil {
			break
		}

		return e.complexity.Ingredient.Name(childComplexity), true

	case "Ingredients.description":
		if e.complexity.Ingredients.Description == nil {
			break
		}

		return e.complexity.Ingredients.Description(childComplexity), true

	case "Ingredients.id":
		if e.complexity.Ingredients.ID == nil {
			break
		}

		return e.complexity.Ingredients.ID(childComplexity), true

	case "Ingredients.name":
		if e.complexity.Ingredients.Name == nil {
			break
		}

		return e.complexity.Ingredients.Name(childComplexity), true

	case "Ingredients.processing":
		if e.complexity.Ingredients.Processing == nil {
			break
		}

		return e.complexity.Ingredients.Processing(childComplexity), true

	case "Ingredients.recipes":
		if e.complexity.Ingredients.Recipes == nil {
			break
		}

		return e.complexity.Ingredients.Recipes(childComplexity), true

	case "Item.amount":
		if e.complexity.Item.Amount == nil {
			break
		}

		return e.complexity.Item.Amount(childComplexity), true

	case "Item.id":
		if e.complexity.Item.ID == nil {
			break
		}

		return e.complexity.Item.ID(childComplexity), true

	case "Item.name":
		if e.complexity.Item.Name == nil {
			break
		}

		return e.complexity.Item.Name(childComplexity), true

	case "JewelMaterial.convert":
		if e.complexity.JewelMaterial.Convert == nil {
			break
		}

		return e.complexity.JewelMaterial.Convert(childComplexity), true

	case "JewelMaterial.craft":
		if e.complexity.JewelMaterial.Craft == nil {
			break
		}

		return e.complexity.JewelMaterial.Craft(childComplexity), true

	case "JewelMaterial.description":
		if e.complexity.JewelMaterial.Description == nil {
			break
		}

		return e.complexity.JewelMaterial.Description(childComplexity), true

	case "JewelMaterial.id":
		if e.complexity.JewelMaterial.ID == nil {
			break
		}

		return e.complexity.JewelMaterial.ID(childComplexity), true

	case "JewelMaterial.name":
		if e.complexity.JewelMaterial.Name == nil {
			break
		}

		return e.complexity.JewelMaterial.Name(childComplexity), true

	case "JewelMaterial.rarity":
		if e.complexity.JewelMaterial.Rarity == nil {
			break
		}

		return e.complexity.JewelMaterial.Rarity(childComplexity), true

	case "JewelMaterial.source":
		if e.complexity.JewelMaterial.Source == nil {
			break
		}

		return e.complexity.JewelMaterial.Source(childComplexity), true

	case "LocalMaterial.description":
		if e.complexity.LocalMaterial.Description == nil {
			break
		}

		return e.complexity.LocalMaterial.Description(childComplexity), true

	case "LocalMaterial.id":
		if e.complexity.LocalMaterial.ID == nil {
			break
		}

		return e.complexity.LocalMaterial.ID(childComplexity), true

	case "LocalMaterial.location":
		if e.complexity.LocalMaterial.Location == nil {
			break
		}

		return e.complexity.LocalMaterial.Location(childComplexity), true

	case "LocalMaterial.name":
		if e.complexity.LocalMaterial.Name == nil {
			break
		}

		return e.complexity.LocalMaterial.Name(childComplexity), true

	case "LocalMaterial.source":
		if e.complexity.LocalMaterial.Source == nil {
			break
		}

		return e.complexity.LocalMaterial.Source(childComplexity), true

	case "Passive.description":
		if e.complexity.Passive.Description == nil {
			break
		}

		return e.complexity.Passive.Description(childComplexity), true

	case "Passive.id":
		if e.complexity.Passive.ID == nil {
			break
		}

		return e.complexity.Passive.ID(childComplexity), true

	case "Passive.level":
		if e.complexity.Passive.Level == nil {
			break
		}

		return e.complexity.Passive.Level(childComplexity), true

	case "Passive.name":
		if e.complexity.Passive.Name == nil {
			break
		}

		return e.complexity.Passive.Name(childComplexity), true

	case "Potion.craft":
		if e.complexity.Potion.Craft == nil {
			break
		}

		return e.complexity.Potion.Craft(childComplexity), true

	case "Potion.description":
		if e.complexity.Potion.Description == nil {
			break
		}

		return e.complexity.Potion.Description(childComplexity), true

	case "Potion.effect":
		if e.complexity.Potion.Effect == nil {
			break
		}

		return e.complexity.Potion.Effect(childComplexity), true

	case "Potion.id":
		if e.complexity.Potion.ID == nil {
			break
		}

		return e.complexity.Potion.ID(childComplexity), true

	case "Potion.name":
		if e.complexity.Potion.Name == nil {
			break
		}

		return e.complexity.Potion.Name(childComplexity), true

	case "Potion.rarity":
		if e.complexity.Potion.Rarity == nil {
			break
		}

		return e.complexity.Potion.Rarity(childComplexity), true

	case "Query.artifact":
		if e.complexity.Query.Artifact == nil {
			break
		}

		args, err := ec.field_Query_artifact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Artifact(childComplexity, args["lang"].(string), args["id"].(string)), true

	case "Query.artifacts":
		if e.complexity.Query.Artifacts == nil {
			break
		}

		args, err := ec.field_Query_artifacts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Artifacts(childComplexity, args["lang"].(string)), true

	case "Query.baits":
		if e.complexity.Query.Baits == nil {
			break
		}

		args, err := ec.field_Query_baits_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Baits(childComplexity, args["lang"].(string)), true

	case "Query.calculateCharacterLevel":
		if e.complexity.Query.CalculateCharacterLevel == nil {
			break
		}

		args, err := ec.field_Query_calculateCharacterLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CalculateCharacterLevel(childComplexity, args["characterId"].(string), args["lang"].(string), args["params"].(model.CalculateCharacterParams)), true

	case "Query.calculateWeaponLevel":
		if e.complexity.Query.CalculateWeaponLevel == nil {
			break
		}

		args, err := ec.field_Query_calculateWeaponLevel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CalculateWeaponLevel(childComplexity, args["lang"].(string), args["weaponId"].(string), args["params"].(model.CalculateWeaponParams)), true

	case "Query.character":
		if e.complexity.Query.Character == nil {
			break
		}

		args, err := ec.field_Query_character_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Character(childComplexity, args["lang"].(string), args["id"].(string)), true

	case "Query.characterExpMaterials":
		if e.complexity.Query.CharacterExpMaterials == nil {
			break
		}

		args, err := ec.field_Query_characterExpMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CharacterExpMaterials(childComplexity, args["lang"].(string)), true

	case "Query.characters":
		if e.complexity.Query.Characters == nil {
			break
		}

		args, err := ec.field_Query_characters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Characters(childComplexity, args["lang"].(string)), true

	case "Query.commonMaterial":
		if e.complexity.Query.CommonMaterial == nil {
			break
		}

		args, err := ec.field_Query_commonMaterial_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommonMaterial(childComplexity, args["lang"].(string), args["id"].(string)), true

	case "Query.commonMaterials":
		if e.complexity.Query.CommonMaterials == nil {
			break
		}

		args, err := ec.field_Query_commonMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CommonMaterials(childComplexity, args["lang"].(string)), true

	case "Query.elementalStoneMaterial":
		if e.complexity.Query.ElementalStoneMaterial == nil {
			break
		}

		args, err := ec.field_Query_elementalStoneMaterial_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElementalStoneMaterial(childComplexity, args["lang"].(string), args["id"].(string)), true

	case "Query.elementalStoneMaterials":
		if e.complexity.Query.ElementalStoneMaterials == nil {
			break
		}

		args, err := ec.field_Query_elementalStoneMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ElementalStoneMaterials(childComplexity, args["lang"].(string)), true

	case "Query.fish":
		if e.complexity.Query.Fish == nil {
			break
		}

		args, err := ec.field_Query_fish_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Fish(childComplexity, args["lang"].(string)), true

	case "Query.fishingRods":
		if e.complexity.Query.FishingRods == nil {
			break
		}

		args, err := ec.field_Query_fishingRods_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FishingRods(childComplexity, args["lang"].(string)), true

	case "Query.food":
		if e.complexity.Query.Food == nil {
			break
		}

		args, err := ec.field_Query_food_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Food(childComplexity, args["lang"].(string)), true

	case "Query.ingredients":
		if e.complexity.Query.Ingredients == nil {
			break
		}

		args, err := ec.field_Query_ingredients_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Ingredients(childComplexity, args["lang"].(string)), true

	case "Query.jewelMaterials":
		if e.complexity.Query.JewelMaterials == nil {
			break
		}

		args, err := ec.field_Query_jewelMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.JewelMaterials(childComplexity, args["lang"].(string)), true

	case "Query.localMaterials":
		if e.complexity.Query.LocalMaterials == nil {
			break
		}

		args, err := ec.field_Query_localMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LocalMaterials(childComplexity, args["lang"].(string)), true

	case "Query.potions":
		if e.complexity.Query.Potions == nil {
			break
		}

		args, err := ec.field_Query_potions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Potions(childComplexity, args["lang"].(string)), true

	case "Query.talentLvlUpMaterials":
		if e.complexity.Query.TalentLvlUpMaterials == nil {
			break
		}

		args, err := ec.field_Query_talentLvlUpMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.TalentLvlUpMaterials(childComplexity, args["lang"].(string)), true

	case "Query.weapon":
		if e.complexity.Query.Weapon == nil {
			break
		}

		args, err := ec.field_Query_weapon_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Weapon(childComplexity, args["lang"].(string), args["id"].(string)), true

	case "Query.weaponExpMaterials":
		if e.complexity.Query.WeaponExpMaterials == nil {
			break
		}

		args, err := ec.field_Query_weaponExpMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WeaponExpMaterials(childComplexity, args["lang"].(string)), true

	case "Query.weaponPrimaryMaterials":
		if e.complexity.Query.WeaponPrimaryMaterials == nil {
			break
		}

		args, err := ec.field_Query_weaponPrimaryMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WeaponPrimaryMaterials(childComplexity, args["lang"].(string)), true

	case "Query.weaponSecondaryMaterials":
		if e.complexity.Query.WeaponSecondaryMaterials == nil {
			break
		}

		args, err := ec.field_Query_weaponSecondaryMaterials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WeaponSecondaryMaterials(childComplexity, args["lang"].(string)), true

	case "Query.weapons":
		if e.complexity.Query.Weapons == nil {
			break
		}

		args, err := ec.field_Query_weapons_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Weapons(childComplexity, args["lang"].(string)), true

	case "Recipe.id":
		if e.complexity.Recipe.ID == nil {
			break
		}

		return e.complexity.Recipe.ID(childComplexity), true

	case "Recipe.name":
		if e.complexity.Recipe.Name == nil {
			break
		}

		return e.complexity.Recipe.Name(childComplexity), true

	case "SimpleBait.id":
		if e.complexity.SimpleBait.ID == nil {
			break
		}

		return e.complexity.SimpleBait.ID(childComplexity), true

	case "SimpleBait.name":
		if e.complexity.SimpleBait.Name == nil {
			break
		}

		return e.complexity.SimpleBait.Name(childComplexity), true

	case "SimpleBait.rarity":
		if e.complexity.SimpleBait.Rarity == nil {
			break
		}

		return e.complexity.SimpleBait.Rarity(childComplexity), true

	case "Skill.attributes":
		if e.complexity.Skill.Attributes == nil {
			break
		}

		return e.complexity.Skill.Attributes(childComplexity), true

	case "Skill.description":
		if e.complexity.Skill.Description == nil {
			break
		}

		return e.complexity.Skill.Description(childComplexity), true

	case "Skill.id":
		if e.complexity.Skill.ID == nil {
			break
		}

		return e.complexity.Skill.ID(childComplexity), true

	case "Skill.info":
		if e.complexity.Skill.Info == nil {
			break
		}

		return e.complexity.Skill.Info(childComplexity), true

	case "Skill.name":
		if e.complexity.Skill.Name == nil {
			break
		}

		return e.complexity.Skill.Name(childComplexity), true

	case "SkillAttribute.label":
		if e.complexity.SkillAttribute.Label == nil {
			break
		}

		return e.complexity.SkillAttribute.Label(childComplexity), true

	case "SkillAttribute.values":
		if e.complexity.SkillAttribute.Values == nil {
			break
		}

		return e.complexity.SkillAttribute.Values(childComplexity), true

	case "StatLevel.ascension":
		if e.complexity.StatLevel.Ascension == nil {
			break
		}

		return e.complexity.StatLevel.Ascension(childComplexity), true

	case "StatLevel.level":
		if e.complexity.StatLevel.Level == nil {
			break
		}

		return e.complexity.StatLevel.Level(childComplexity), true

	case "StatLevel.primary":
		if e.complexity.StatLevel.Primary == nil {
			break
		}

		return e.complexity.StatLevel.Primary(childComplexity), true

	case "StatLevel.secondary":
		if e.complexity.StatLevel.Secondary == nil {
			break
		}

		return e.complexity.StatLevel.Secondary(childComplexity), true

	case "TalentLvlUpMaterial.craft":
		if e.complexity.TalentLvlUpMaterial.Craft == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Craft(childComplexity), true

	case "TalentLvlUpMaterial.days":
		if e.complexity.TalentLvlUpMaterial.Days == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Days(childComplexity), true

	case "TalentLvlUpMaterial.description":
		if e.complexity.TalentLvlUpMaterial.Description == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Description(childComplexity), true

	case "TalentLvlUpMaterial.domain":
		if e.complexity.TalentLvlUpMaterial.Domain == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Domain(childComplexity), true

	case "TalentLvlUpMaterial.id":
		if e.complexity.TalentLvlUpMaterial.ID == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.ID(childComplexity), true

	case "TalentLvlUpMaterial.location":
		if e.complexity.TalentLvlUpMaterial.Location == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Location(childComplexity), true

	case "TalentLvlUpMaterial.name":
		if e.complexity.TalentLvlUpMaterial.Name == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Name(childComplexity), true

	case "TalentLvlUpMaterial.rarity":
		if e.complexity.TalentLvlUpMaterial.Rarity == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Rarity(childComplexity), true

	case "TalentLvlUpMaterial.source":
		if e.complexity.TalentLvlUpMaterial.Source == nil {
			break
		}

		return e.complexity.TalentLvlUpMaterial.Source(childComplexity), true

	case "TalentMaterial.cost":
		if e.complexity.TalentMaterial.Cost == nil {
			break
		}

		return e.complexity.TalentMaterial.Cost(childComplexity), true

	case "TalentMaterial.items":
		if e.complexity.TalentMaterial.Items == nil {
			break
		}

		return e.complexity.TalentMaterial.Items(childComplexity), true

	case "TalentMaterial.level":
		if e.complexity.TalentMaterial.Level == nil {
			break
		}

		return e.complexity.TalentMaterial.Level(childComplexity), true

	case "Weapon.ascensions":
		if e.complexity.Weapon.Ascensions == nil {
			break
		}

		return e.complexity.Weapon.Ascensions(childComplexity), true

	case "Weapon.bonus":
		if e.complexity.Weapon.Bonus == nil {
			break
		}

		return e.complexity.Weapon.Bonus(childComplexity), true

	case "Weapon.description":
		if e.complexity.Weapon.Description == nil {
			break
		}

		return e.complexity.Weapon.Description(childComplexity), true

	case "Weapon.domain":
		if e.complexity.Weapon.Domain == nil {
			break
		}

		return e.complexity.Weapon.Domain(childComplexity), true

	case "Weapon.id":
		if e.complexity.Weapon.ID == nil {
			break
		}

		return e.complexity.Weapon.ID(childComplexity), true

	case "Weapon.name":
		if e.complexity.Weapon.Name == nil {
			break
		}

		return e.complexity.Weapon.Name(childComplexity), true

	case "Weapon.passive":
		if e.complexity.Weapon.Passive == nil {
			break
		}

		return e.complexity.Weapon.Passive(childComplexity), true

	case "Weapon.rarity":
		if e.complexity.Weapon.Rarity == nil {
			break
		}

		return e.complexity.Weapon.Rarity(childComplexity), true

	case "Weapon.refinements":
		if e.complexity.Weapon.Refinements == nil {
			break
		}

		return e.complexity.Weapon.Refinements(childComplexity), true

	case "Weapon.stats":
		if e.complexity.Weapon.Stats == nil {
			break
		}

		return e.complexity.Weapon.Stats(childComplexity), true

	case "Weapon.type":
		if e.complexity.Weapon.Type == nil {
			break
		}

		return e.complexity.Weapon.Type(childComplexity), true

	case "WeaponAscension.ascension":
		if e.complexity.WeaponAscension.Ascension == nil {
			break
		}

		return e.complexity.WeaponAscension.Ascension(childComplexity), true

	case "WeaponAscension.cost":
		if e.complexity.WeaponAscension.Cost == nil {
			break
		}

		return e.complexity.WeaponAscension.Cost(childComplexity), true

	case "WeaponAscension.level":
		if e.complexity.WeaponAscension.Level == nil {
			break
		}

		return e.complexity.WeaponAscension.Level(childComplexity), true

	case "WeaponAscension.materials":
		if e.complexity.WeaponAscension.Materials == nil {
			break
		}

		return e.complexity.WeaponAscension.Materials(childComplexity), true

	case "WeaponPrimaryMaterial.craft":
		if e.complexity.WeaponPrimaryMaterial.Craft == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Craft(childComplexity), true

	case "WeaponPrimaryMaterial.days":
		if e.complexity.WeaponPrimaryMaterial.Days == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Days(childComplexity), true

	case "WeaponPrimaryMaterial.description":
		if e.complexity.WeaponPrimaryMaterial.Description == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Description(childComplexity), true

	case "WeaponPrimaryMaterial.domain":
		if e.complexity.WeaponPrimaryMaterial.Domain == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Domain(childComplexity), true

	case "WeaponPrimaryMaterial.id":
		if e.complexity.WeaponPrimaryMaterial.ID == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.ID(childComplexity), true

	case "WeaponPrimaryMaterial.location":
		if e.complexity.WeaponPrimaryMaterial.Location == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Location(childComplexity), true

	case "WeaponPrimaryMaterial.name":
		if e.complexity.WeaponPrimaryMaterial.Name == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Name(childComplexity), true

	case "WeaponPrimaryMaterial.rarity":
		if e.complexity.WeaponPrimaryMaterial.Rarity == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Rarity(childComplexity), true

	case "WeaponPrimaryMaterial.source":
		if e.complexity.WeaponPrimaryMaterial.Source == nil {
			break
		}

		return e.complexity.WeaponPrimaryMaterial.Source(childComplexity), true

	case "WeaponRefinement.desc":
		if e.complexity.WeaponRefinement.Desc == nil {
			break
		}

		return e.complexity.WeaponRefinement.Desc(childComplexity), true

	case "WeaponRefinement.refinement":
		if e.complexity.WeaponRefinement.Refinement == nil {
			break
		}

		return e.complexity.WeaponRefinement.Refinement(childComplexity), true

	case "WeaponSecondaryMaterial.craft":
		if e.complexity.WeaponSecondaryMaterial.Craft == nil {
			break
		}

		return e.complexity.WeaponSecondaryMaterial.Craft(childComplexity), true

	case "WeaponSecondaryMaterial.description":
		if e.complexity.WeaponSecondaryMaterial.Description == nil {
			break
		}

		return e.complexity.WeaponSecondaryMaterial.Description(childComplexity), true

	case "WeaponSecondaryMaterial.id":
		if e.complexity.WeaponSecondaryMaterial.ID == nil {
			break
		}

		return e.complexity.WeaponSecondaryMaterial.ID(childComplexity), true

	case "WeaponSecondaryMaterial.name":
		if e.complexity.WeaponSecondaryMaterial.Name == nil {
			break
		}

		return e.complexity.WeaponSecondaryMaterial.Name(childComplexity), true

	case "WeaponSecondaryMaterial.rarity":
		if e.complexity.WeaponSecondaryMaterial.Rarity == nil {
			break
		}

		return e.complexity.WeaponSecondaryMaterial.Rarity(childComplexity), true

	case "WeaponSecondaryMaterial.source":
		if e.complexity.WeaponSecondaryMaterial.Source == nil {
			break
		}

		return e.complexity.WeaponSecondaryMaterial.Source(childComplexity), true

	case "WeaponStat.levels":
		if e.complexity.WeaponStat.Levels == nil {
			break
		}

		return e.complexity.WeaponStat.Levels(childComplexity), true

	case "WeaponStat.primary":
		if e.complexity.WeaponStat.Primary == nil {
			break
		}

		return e.complexity.WeaponStat.Primary(childComplexity), true

	case "WeaponStat.secondary":
		if e.complexity.WeaponStat.Secondary == nil {
			break
		}

		return e.complexity.WeaponStat.Secondary(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "graph/schemas/artifact.graphqls", Input: `type ArtifactSet {
  id: ID!
  name: String!
  description: String
}

type Artifact {
  id: ID!
  name: String!
  min_rarity: Int!
  max_rarity: Int!
  flower: ArtifactSet
  plume: ArtifactSet
  sands: ArtifactSet
  goblet: ArtifactSet
  circlet: ArtifactSet
  one_pc: String
  two_pc: String
  four_pc: String
}
`, BuiltIn: false},
	{Name: "graph/schemas/calculate.graphqls", Input: `input ExpLevel {
  lvl: Int!
  asc: Boolean!
  asclLvl: Int!
}

input TalentLevel {
  aa: Int!
  skill: Int!
  burst: Int!
}

type CalculationItemResult {
  id: String!
  img: String!
  name: String!
  amount: Int!
}

input CalculateCharacterParams {
  currentLevel: ExpLevel
  intendedLevel: ExpLevel
  currentTalentLvl: TalentLevel
  intendedTalentLvl: TalentLevel
}

type CalculationCharacterResult {
  expWasted: Int
  items: [CalculationItemResult]
}

input CalculateWeaponParams {
  currentLevel: ExpLevel!
  intendedLevel: ExpLevel!
}`, BuiltIn: false},
	{Name: "graph/schemas/character.graphqls", Input: `type SkillAttribute {
  label: String!
  values: [String!]!
}

type Skill {
  id: String!
  name: String!
  description: String!
  info: String!
  attributes: [SkillAttribute]
}

type Passive {
  id: String!
  name: String!
  description: String!
  level: Int
}

type Constellation {
  id: String!
  name: String!
  description: String!
  level: Int
}

type AscensionMaterial {
  id: String!
  name: String!
  amount: Int
  rarity: Int
}

type Ascension {
  ascension: Int
  level: [Int]
  cost: Int
  mat_one: AscensionMaterial
  mat_two: AscensionMaterial
  mat_three: AscensionMaterial
  mat_four: AscensionMaterial
}

type CharacterVoice {
  english: String!
  chinese: String!
  japanese: String!
  korean: String!
}

type TalentMaterial {
  level: Int
  cost: Int
  items: [AscensionMaterial]
}

type Character {
  id: String!
  name: String!
  title: String!
  description: String!
  weapon_type: String!
  element: String!
  gender: String!
  substat: String!
  affiliation: String!
  region: String!
  rarity: Int
  birthday: [Int]
  constellation: String!
  domain: String!
  cv: CharacterVoice
  skills: [Skill]
  passives: [Passive]
  constellations: [Constellation]
  ascension: [Ascension]
  talent_materials: [TalentMaterial]
}
`, BuiltIn: false},
	{Name: "graph/schemas/common_material.graphqls", Input: `type CommonMaterialItem {
  id: String
  name: String
  amount: Int
}

type CommonMaterialCraft {
  cost: Int
  items: [CommonMaterialItem]
}

type CommonMaterial {
  id: String
  name: String
  description: String
  source: [String]
  rarity: Int
  craft: CommonMaterialCraft
}
`, BuiltIn: false},
	{Name: "graph/schemas/elemental_stone_material.graphqls", Input: `type ElementalStoneMaterial {
  id: String
  name: String
  description: String
  source: [String]
  rarity: Int
}
`, BuiltIn: false},
	{Name: "graph/schemas/exp.graphqls", Input: `type ExpMaterial {
  id: String!
  name: String!
  description: String!
  rarity: Int!
  exp: Int!
}
`, BuiltIn: false},
	{Name: "graph/schemas/fishing.graphqls", Input: `type SimpleBait {
  id: String
  name: String
  rarity: Int
}

type Fish {
  id: String!
  name: String
  description: String
  rarity: Int
  source: [String]
  bait: SimpleBait
}

type FishingRod {
  id: String
  name: String
  description: String
  rarity: Int
  source: [String]
}

type CraftItem {
  id: String
  name: String
  amount: Int
}

type Craft {
  items: [CraftItem]
  result: Int
}

type FishBait {
  id: String
  name: String
  amount: Int
}

type Bait {
  id: String
  name: String
  description: String
  rarity: Int
  craft: Craft
  fish: [FishBait]
}
`, BuiltIn: false},
	{Name: "graph/schemas/food.graphqls", Input: `type Ingredient {
  id: String
  name: String
  amount: Int
}

type FoodType {
  name: String
  description: String
  effect: String
}

type CharacterFood {
  id: String
  name: String
}

type FoodSpecial {
  name: String
  description: String
  effect: String
  character: CharacterFood
}

type FoodResult {
  normal: FoodType
  delicious: FoodType
  suspicious: FoodType
  special: FoodSpecial
}

type Food {
  id: String
  name: String
  description: String
  ingredients: [Ingredient]
  dish_type: String
  results: FoodResult
  rarity: Int
}
`, BuiltIn: false},
	{Name: "graph/schemas/ingredient.graphqls", Input: `type Item {
  id: String
  name: String
  amount: Int
}

type Recipe {
  id: String
  name: String
}

type Ingredients {
  id: String
  name: String
  description: String
  processing: [Item]
  recipes: [Recipe]
}
`, BuiltIn: false},
	{Name: "graph/schemas/jewel_material.graphqls", Input: `type CraftJewel {
  cost: Int
  items: [Item]
}

type JewelMaterial {
  id: String
  name: String
  description: String
  source: [String]
  rarity: Int
  craft: CraftJewel
  convert: [[Item]]
}
`, BuiltIn: false},
	{Name: "graph/schemas/local_material.graphqls", Input: `type LocalMaterial {
  id: String
  name: String
  description: String
  source: [String]
  location: String
}
`, BuiltIn: false},
	{Name: "graph/schemas/potion.graphqls", Input: `type CraftPotion {
  cost: Int
  items: [Item]
}

type Potion {
  id: String
  name: String
  description: String
  effect: String
  rarity: Int
  craft: CraftPotion
}
`, BuiltIn: false},
	{Name: "graph/schemas/schema.graphqls", Input: `type Query {
  artifacts(lang: String!): [Artifact!]!
  artifact(lang: String!, id: ID!): Artifact!
  characters(lang: String!): [Character!]!
  character(lang: String!, id: ID!): Character!
  characterExpMaterials(lang: String!): [ExpMaterial!]!
  commonMaterials(lang: String!): [CommonMaterial!]!
  commonMaterial(lang: String!, id: ID!): CommonMaterial!
  elementalStoneMaterials(lang: String!): [ElementalStoneMaterial!]!
  elementalStoneMaterial(lang: String!, id: ID!): ElementalStoneMaterial!
  fish(lang: String!): [Fish!]!
  fishingRods(lang: String!): [FishingRod!]!
  baits(lang: String!): [Bait!]!
  food(lang: String!): [Food!]!
  ingredients(lang: String!): [Ingredient!]!
  jewelMaterials(lang: String!): [JewelMaterial!]!
  localMaterials(lang: String!): [LocalMaterial!]!
  potions(lang: String!): [Potion!]!
  talentLvlUpMaterials(lang: String!): [TalentLvlUpMaterial!]!
  weaponPrimaryMaterials(lang: String!): [WeaponPrimaryMaterial!]!
  weaponSecondaryMaterials(lang: String!): [WeaponSecondaryMaterial!]!
  weaponExpMaterials(lang: String!): [ExpMaterial!]!
  weapons(lang: String!): [Weapon!]!
  weapon(lang: String!, id: ID!): Weapon!
  calculateCharacterLevel(
    characterId: String!
    lang: String!
    params: CalculateCharacterParams!
  ): CalculationCharacterResult!
  calculateWeaponLevel(
    lang: String!
    weaponId: String!
    params: CalculateWeaponParams!
  ): [CalculationItemResult]!
}

# type Mutation {
#   createTodo(input: NewTodo!): Todo!
# }
`, BuiltIn: false},
	{Name: "graph/schemas/talent_lvl_up_material.graphqls", Input: `type CraftTalentLvlUp {
  cost: Int
  items: [Item]
}

type TalentLvlUpMaterial {
  id: String
  name: String
  description: String
  source: [String]
  location: String
  rarity: Int
  craft: CraftTalentLvlUp
  domain: String
  days: [String]
}
`, BuiltIn: false},
	{Name: "graph/schemas/weapon.graphqls", Input: `type WeaponAscension {
  ascension: Int
  level: Int
  cost: Int
  materials: [AscensionMaterial]
}

type WeaponRefinement {
  refinement: Int
  desc: String
}

type StatLevel {
  ascension: Int
  level: Int
  primary: Int
  secondary: Float
}

type WeaponStat {
  primary: String
  secondary: String
  levels: [StatLevel]
}

type Weapon {
  id: String
  name: String
  description: String
  rarity: Int
  type: String
  domain: String
  passive: String
  bonus: String
  stats: WeaponStat
  ascensions: [WeaponAscension]
  refinements: [WeaponRefinement]
}
`, BuiltIn: false},
	{Name: "graph/schemas/weapon_primary_material.graphqls", Input: `type CraftWeaponPrimary {
  cost: Int
  items: [Item]
}

type WeaponPrimaryMaterial {
  id: String
  name: String
  description: String
  source: [String]
  location: String
  rarity: Int
  craft: CraftWeaponPrimary
  domain: String
  days: [String]
}
`, BuiltIn: false},
	{Name: "graph/schemas/weapon_secondary_material.graphqls", Input: `type CraftWeaponSecondary {
  cost: Int
  items: [Item]
}

type WeaponSecondaryMaterial {
  id: String
  name: String
  description: String
  source: [String]
  rarity: Int
  craft: CraftWeaponSecondary
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_artifact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_artifacts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_baits_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_calculateCharacterLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["characterId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("characterId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["characterId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg1
	var arg2 model.CalculateCharacterParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalNCalculateCharacterParams2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculateCharacterParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_calculateWeaponLevel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["weaponId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weaponId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["weaponId"] = arg1
	var arg2 model.CalculateWeaponParams
	if tmp, ok := rawArgs["params"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("params"))
		arg2, err = ec.unmarshalNCalculateWeaponParams2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculateWeaponParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["params"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_characterExpMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_character_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_characters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_commonMaterial_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_commonMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_elementalStoneMaterial_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_elementalStoneMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fish_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fishingRods_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_food_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ingredients_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_jewelMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_localMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_potions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_talentLvlUpMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_weaponExpMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_weaponPrimaryMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_weaponSecondaryMaterials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_weapon_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_weapons_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["lang"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lang"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lang"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Artifact_id(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_name(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_min_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinRarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_max_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxRarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_flower(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flower, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ArtifactSet)
	fc.Result = res
	return ec.marshalOArtifactSet2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_plume(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Plume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ArtifactSet)
	fc.Result = res
	return ec.marshalOArtifactSet2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_sands(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sands, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ArtifactSet)
	fc.Result = res
	return ec.marshalOArtifactSet2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_goblet(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Goblet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ArtifactSet)
	fc.Result = res
	return ec.marshalOArtifactSet2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_circlet(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Circlet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ArtifactSet)
	fc.Result = res
	return ec.marshalOArtifactSet2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactSet(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_one_pc(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OnePc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_two_pc(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TwoPc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Artifact_four_pc(ctx context.Context, field graphql.CollectedField, obj *model.Artifact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Artifact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FourPc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactSet_id(ctx context.Context, field graphql.CollectedField, obj *model.ArtifactSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactSet_name(ctx context.Context, field graphql.CollectedField, obj *model.ArtifactSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ArtifactSet_description(ctx context.Context, field graphql.CollectedField, obj *model.ArtifactSet) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ArtifactSet",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ascension_ascension(ctx context.Context, field graphql.CollectedField, obj *model.Ascension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ascension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ascension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Ascension_level(ctx context.Context, field graphql.CollectedField, obj *model.Ascension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ascension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Ascension_cost(ctx context.Context, field graphql.CollectedField, obj *model.Ascension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ascension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Ascension_mat_one(ctx context.Context, field graphql.CollectedField, obj *model.Ascension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ascension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatOne, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AscensionMaterial)
	fc.Result = res
	return ec.marshalOAscensionMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _Ascension_mat_two(ctx context.Context, field graphql.CollectedField, obj *model.Ascension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ascension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatTwo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AscensionMaterial)
	fc.Result = res
	return ec.marshalOAscensionMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _Ascension_mat_three(ctx context.Context, field graphql.CollectedField, obj *model.Ascension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ascension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatThree, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AscensionMaterial)
	fc.Result = res
	return ec.marshalOAscensionMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _Ascension_mat_four(ctx context.Context, field graphql.CollectedField, obj *model.Ascension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ascension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MatFour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AscensionMaterial)
	fc.Result = res
	return ec.marshalOAscensionMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _AscensionMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.AscensionMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AscensionMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AscensionMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.AscensionMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AscensionMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AscensionMaterial_amount(ctx context.Context, field graphql.CollectedField, obj *model.AscensionMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AscensionMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AscensionMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.AscensionMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AscensionMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Bait_id(ctx context.Context, field graphql.CollectedField, obj *model.Bait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Bait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Bait_name(ctx context.Context, field graphql.CollectedField, obj *model.Bait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Bait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Bait_description(ctx context.Context, field graphql.CollectedField, obj *model.Bait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Bait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Bait_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Bait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Bait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Bait_craft(ctx context.Context, field graphql.CollectedField, obj *model.Bait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Bait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Craft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Craft)
	fc.Result = res
	return ec.marshalOCraft2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraft(ctx, field.Selections, res)
}

func (ec *executionContext) _Bait_fish(ctx context.Context, field graphql.CollectedField, obj *model.Bait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Bait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fish, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FishBait)
	fc.Result = res
	return ec.marshalOFishBait2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishBait(ctx, field.Selections, res)
}

func (ec *executionContext) _CalculationCharacterResult_expWasted(ctx context.Context, field graphql.CollectedField, obj *model.CalculationCharacterResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalculationCharacterResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpWasted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CalculationCharacterResult_items(ctx context.Context, field graphql.CollectedField, obj *model.CalculationCharacterResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalculationCharacterResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CalculationItemResult)
	fc.Result = res
	return ec.marshalOCalculationItemResult2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationItemResult(ctx, field.Selections, res)
}

func (ec *executionContext) _CalculationItemResult_id(ctx context.Context, field graphql.CollectedField, obj *model.CalculationItemResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalculationItemResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalculationItemResult_img(ctx context.Context, field graphql.CollectedField, obj *model.CalculationItemResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalculationItemResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Img, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalculationItemResult_name(ctx context.Context, field graphql.CollectedField, obj *model.CalculationItemResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalculationItemResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalculationItemResult_amount(ctx context.Context, field graphql.CollectedField, obj *model.CalculationItemResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalculationItemResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_id(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_name(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_title(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_description(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_weapon_type(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeaponType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_element(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Element, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_gender(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_substat(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Substat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_affiliation(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Affiliation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_region(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_birthday(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*int)
	fc.Result = res
	return ec.marshalOInt2ᚕᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_constellation(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Constellation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_domain(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_cv(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cv, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CharacterVoice)
	fc.Result = res
	return ec.marshalOCharacterVoice2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacterVoice(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_skills(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Skills, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Skill)
	fc.Result = res
	return ec.marshalOSkill2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkill(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_passives(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Passive)
	fc.Result = res
	return ec.marshalOPassive2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPassive(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_constellations(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Constellations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Constellation)
	fc.Result = res
	return ec.marshalOConstellation2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐConstellation(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_ascension(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ascension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Ascension)
	fc.Result = res
	return ec.marshalOAscension2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscension(ctx, field.Selections, res)
}

func (ec *executionContext) _Character_talent_materials(ctx context.Context, field graphql.CollectedField, obj *model.Character) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Character",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TalentMaterials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.TalentMaterial)
	fc.Result = res
	return ec.marshalOTalentMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _CharacterFood_id(ctx context.Context, field graphql.CollectedField, obj *model.CharacterFood) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CharacterFood",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CharacterFood_name(ctx context.Context, field graphql.CollectedField, obj *model.CharacterFood) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CharacterFood",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CharacterVoice_english(ctx context.Context, field graphql.CollectedField, obj *model.CharacterVoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CharacterVoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.English, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CharacterVoice_chinese(ctx context.Context, field graphql.CollectedField, obj *model.CharacterVoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CharacterVoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chinese, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CharacterVoice_japanese(ctx context.Context, field graphql.CollectedField, obj *model.CharacterVoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CharacterVoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Japanese, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CharacterVoice_korean(ctx context.Context, field graphql.CollectedField, obj *model.CharacterVoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CharacterVoice",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Korean, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterial_source(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterial_craft(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Craft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CommonMaterialCraft)
	fc.Result = res
	return ec.marshalOCommonMaterialCraft2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialCraft(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterialCraft_cost(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterialCraft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterialCraft",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterialCraft_items(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterialCraft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterialCraft",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CommonMaterialItem)
	fc.Result = res
	return ec.marshalOCommonMaterialItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialItem(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterialItem_id(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterialItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterialItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterialItem_name(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterialItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterialItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CommonMaterialItem_amount(ctx context.Context, field graphql.CollectedField, obj *model.CommonMaterialItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CommonMaterialItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Constellation_id(ctx context.Context, field graphql.CollectedField, obj *model.Constellation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Constellation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Constellation_name(ctx context.Context, field graphql.CollectedField, obj *model.Constellation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Constellation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Constellation_description(ctx context.Context, field graphql.CollectedField, obj *model.Constellation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Constellation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Constellation_level(ctx context.Context, field graphql.CollectedField, obj *model.Constellation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Constellation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Craft_items(ctx context.Context, field graphql.CollectedField, obj *model.Craft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Craft",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CraftItem)
	fc.Result = res
	return ec.marshalOCraftItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Craft_result(ctx context.Context, field graphql.CollectedField, obj *model.Craft) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Craft",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftItem_id(ctx context.Context, field graphql.CollectedField, obj *model.CraftItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftItem_name(ctx context.Context, field graphql.CollectedField, obj *model.CraftItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftItem_amount(ctx context.Context, field graphql.CollectedField, obj *model.CraftItem) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftItem",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftJewel_cost(ctx context.Context, field graphql.CollectedField, obj *model.CraftJewel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftJewel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftJewel_items(ctx context.Context, field graphql.CollectedField, obj *model.CraftJewel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftJewel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftPotion_cost(ctx context.Context, field graphql.CollectedField, obj *model.CraftPotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftPotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftPotion_items(ctx context.Context, field graphql.CollectedField, obj *model.CraftPotion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftPotion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftTalentLvlUp_cost(ctx context.Context, field graphql.CollectedField, obj *model.CraftTalentLvlUp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftTalentLvlUp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftTalentLvlUp_items(ctx context.Context, field graphql.CollectedField, obj *model.CraftTalentLvlUp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftTalentLvlUp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftWeaponPrimary_cost(ctx context.Context, field graphql.CollectedField, obj *model.CraftWeaponPrimary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftWeaponPrimary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftWeaponPrimary_items(ctx context.Context, field graphql.CollectedField, obj *model.CraftWeaponPrimary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftWeaponPrimary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftWeaponSecondary_cost(ctx context.Context, field graphql.CollectedField, obj *model.CraftWeaponSecondary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftWeaponSecondary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _CraftWeaponSecondary_items(ctx context.Context, field graphql.CollectedField, obj *model.CraftWeaponSecondary) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CraftWeaponSecondary",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _ElementalStoneMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.ElementalStoneMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElementalStoneMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElementalStoneMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.ElementalStoneMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElementalStoneMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElementalStoneMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.ElementalStoneMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElementalStoneMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElementalStoneMaterial_source(ctx context.Context, field graphql.CollectedField, obj *model.ElementalStoneMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElementalStoneMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ElementalStoneMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.ElementalStoneMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElementalStoneMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.ExpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.ExpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.ExpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.ExpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ExpMaterial_exp(ctx context.Context, field graphql.CollectedField, obj *model.ExpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ExpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Exp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Fish_id(ctx context.Context, field graphql.CollectedField, obj *model.Fish) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fish",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fish_name(ctx context.Context, field graphql.CollectedField, obj *model.Fish) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fish",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Fish_description(ctx context.Context, field graphql.CollectedField, obj *model.Fish) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fish",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Fish_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Fish) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fish",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Fish_source(ctx context.Context, field graphql.CollectedField, obj *model.Fish) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fish",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Fish_bait(ctx context.Context, field graphql.CollectedField, obj *model.Fish) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fish",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bait, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SimpleBait)
	fc.Result = res
	return ec.marshalOSimpleBait2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSimpleBait(ctx, field.Selections, res)
}

func (ec *executionContext) _FishBait_id(ctx context.Context, field graphql.CollectedField, obj *model.FishBait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishBait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FishBait_name(ctx context.Context, field graphql.CollectedField, obj *model.FishBait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishBait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FishBait_amount(ctx context.Context, field graphql.CollectedField, obj *model.FishBait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishBait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _FishingRod_id(ctx context.Context, field graphql.CollectedField, obj *model.FishingRod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishingRod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FishingRod_name(ctx context.Context, field graphql.CollectedField, obj *model.FishingRod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishingRod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FishingRod_description(ctx context.Context, field graphql.CollectedField, obj *model.FishingRod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishingRod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FishingRod_rarity(ctx context.Context, field graphql.CollectedField, obj *model.FishingRod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishingRod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _FishingRod_source(ctx context.Context, field graphql.CollectedField, obj *model.FishingRod) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FishingRod",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Food_id(ctx context.Context, field graphql.CollectedField, obj *model.Food) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Food",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Food_name(ctx context.Context, field graphql.CollectedField, obj *model.Food) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Food",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Food_description(ctx context.Context, field graphql.CollectedField, obj *model.Food) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Food",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Food_ingredients(ctx context.Context, field graphql.CollectedField, obj *model.Food) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Food",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ingredients, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Ingredient)
	fc.Result = res
	return ec.marshalOIngredient2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredient(ctx, field.Selections, res)
}

func (ec *executionContext) _Food_dish_type(ctx context.Context, field graphql.CollectedField, obj *model.Food) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Food",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DishType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Food_results(ctx context.Context, field graphql.CollectedField, obj *model.Food) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Food",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FoodResult)
	fc.Result = res
	return ec.marshalOFoodResult2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Food_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Food) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Food",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodResult_normal(ctx context.Context, field graphql.CollectedField, obj *model.FoodResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Normal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FoodType)
	fc.Result = res
	return ec.marshalOFoodType2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodType(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodResult_delicious(ctx context.Context, field graphql.CollectedField, obj *model.FoodResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delicious, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FoodType)
	fc.Result = res
	return ec.marshalOFoodType2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodType(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodResult_suspicious(ctx context.Context, field graphql.CollectedField, obj *model.FoodResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Suspicious, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FoodType)
	fc.Result = res
	return ec.marshalOFoodType2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodType(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodResult_special(ctx context.Context, field graphql.CollectedField, obj *model.FoodResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodResult",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Special, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FoodSpecial)
	fc.Result = res
	return ec.marshalOFoodSpecial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodSpecial(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodSpecial_name(ctx context.Context, field graphql.CollectedField, obj *model.FoodSpecial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodSpecial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodSpecial_description(ctx context.Context, field graphql.CollectedField, obj *model.FoodSpecial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodSpecial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodSpecial_effect(ctx context.Context, field graphql.CollectedField, obj *model.FoodSpecial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodSpecial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Effect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodSpecial_character(ctx context.Context, field graphql.CollectedField, obj *model.FoodSpecial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodSpecial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Character, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CharacterFood)
	fc.Result = res
	return ec.marshalOCharacterFood2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacterFood(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodType_name(ctx context.Context, field graphql.CollectedField, obj *model.FoodType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodType_description(ctx context.Context, field graphql.CollectedField, obj *model.FoodType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FoodType_effect(ctx context.Context, field graphql.CollectedField, obj *model.FoodType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FoodType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Effect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredient_id(ctx context.Context, field graphql.CollectedField, obj *model.Ingredient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredient_name(ctx context.Context, field graphql.CollectedField, obj *model.Ingredient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredient_amount(ctx context.Context, field graphql.CollectedField, obj *model.Ingredient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredients_id(ctx context.Context, field graphql.CollectedField, obj *model.Ingredients) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredients",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredients_name(ctx context.Context, field graphql.CollectedField, obj *model.Ingredients) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredients",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredients_description(ctx context.Context, field graphql.CollectedField, obj *model.Ingredients) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredients",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredients_processing(ctx context.Context, field graphql.CollectedField, obj *model.Ingredients) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredients",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Processing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Ingredients_recipes(ctx context.Context, field graphql.CollectedField, obj *model.Ingredients) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Ingredients",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Recipe)
	fc.Result = res
	return ec.marshalORecipe2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_id(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_name(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_amount(ctx context.Context, field graphql.CollectedField, obj *model.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JewelMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.JewelMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JewelMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JewelMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.JewelMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JewelMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JewelMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.JewelMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JewelMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JewelMaterial_source(ctx context.Context, field graphql.CollectedField, obj *model.JewelMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JewelMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _JewelMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.JewelMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JewelMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _JewelMaterial_craft(ctx context.Context, field graphql.CollectedField, obj *model.JewelMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JewelMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Craft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CraftJewel)
	fc.Result = res
	return ec.marshalOCraftJewel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftJewel(ctx, field.Selections, res)
}

func (ec *executionContext) _JewelMaterial_convert(ctx context.Context, field graphql.CollectedField, obj *model.JewelMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "JewelMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Convert, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([][]*model.Item)
	fc.Result = res
	return ec.marshalOItem2ᚕᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.LocalMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.LocalMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.LocalMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalMaterial_source(ctx context.Context, field graphql.CollectedField, obj *model.LocalMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LocalMaterial_location(ctx context.Context, field graphql.CollectedField, obj *model.LocalMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LocalMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Passive_id(ctx context.Context, field graphql.CollectedField, obj *model.Passive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Passive_name(ctx context.Context, field graphql.CollectedField, obj *model.Passive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Passive_description(ctx context.Context, field graphql.CollectedField, obj *model.Passive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Passive_level(ctx context.Context, field graphql.CollectedField, obj *model.Passive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Passive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Potion_id(ctx context.Context, field graphql.CollectedField, obj *model.Potion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Potion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Potion_name(ctx context.Context, field graphql.CollectedField, obj *model.Potion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Potion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Potion_description(ctx context.Context, field graphql.CollectedField, obj *model.Potion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Potion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Potion_effect(ctx context.Context, field graphql.CollectedField, obj *model.Potion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Potion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Effect, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Potion_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Potion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Potion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Potion_craft(ctx context.Context, field graphql.CollectedField, obj *model.Potion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Potion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Craft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CraftPotion)
	fc.Result = res
	return ec.marshalOCraftPotion2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftPotion(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_artifacts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_artifacts_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Artifacts(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Artifact)
	fc.Result = res
	return ec.marshalNArtifact2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_artifact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_artifact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Artifact(rctx, args["lang"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Artifact)
	fc.Result = res
	return ec.marshalNArtifact2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_characters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_characters_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Characters(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Character)
	fc.Result = res
	return ec.marshalNCharacter2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacterᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_character(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_character_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Character(rctx, args["lang"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Character)
	fc.Result = res
	return ec.marshalNCharacter2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacter(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_characterExpMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_characterExpMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CharacterExpMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExpMaterial)
	fc.Result = res
	return ec.marshalNExpMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_commonMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_commonMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommonMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CommonMaterial)
	fc.Result = res
	return ec.marshalNCommonMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_commonMaterial(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_commonMaterial_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CommonMaterial(rctx, args["lang"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CommonMaterial)
	fc.Result = res
	return ec.marshalNCommonMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_elementalStoneMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_elementalStoneMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElementalStoneMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ElementalStoneMaterial)
	fc.Result = res
	return ec.marshalNElementalStoneMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐElementalStoneMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_elementalStoneMaterial(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_elementalStoneMaterial_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ElementalStoneMaterial(rctx, args["lang"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ElementalStoneMaterial)
	fc.Result = res
	return ec.marshalNElementalStoneMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐElementalStoneMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fish(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fish_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Fish(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Fish)
	fc.Result = res
	return ec.marshalNFish2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fishingRods(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fishingRods_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FishingRods(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.FishingRod)
	fc.Result = res
	return ec.marshalNFishingRod2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishingRodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_baits(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_baits_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Baits(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Bait)
	fc.Result = res
	return ec.marshalNBait2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐBaitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_food(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_food_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Food(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Food)
	fc.Result = res
	return ec.marshalNFood2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ingredients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ingredients_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Ingredients(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Ingredient)
	fc.Result = res
	return ec.marshalNIngredient2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_jewelMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_jewelMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().JewelMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.JewelMaterial)
	fc.Result = res
	return ec.marshalNJewelMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐJewelMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_localMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_localMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LocalMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.LocalMaterial)
	fc.Result = res
	return ec.marshalNLocalMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐLocalMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_potions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_potions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Potions(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Potion)
	fc.Result = res
	return ec.marshalNPotion2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPotionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_talentLvlUpMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_talentLvlUpMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TalentLvlUpMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.TalentLvlUpMaterial)
	fc.Result = res
	return ec.marshalNTalentLvlUpMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentLvlUpMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_weaponPrimaryMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_weaponPrimaryMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WeaponPrimaryMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.WeaponPrimaryMaterial)
	fc.Result = res
	return ec.marshalNWeaponPrimaryMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponPrimaryMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_weaponSecondaryMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_weaponSecondaryMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WeaponSecondaryMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.WeaponSecondaryMaterial)
	fc.Result = res
	return ec.marshalNWeaponSecondaryMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponSecondaryMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_weaponExpMaterials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_weaponExpMaterials_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WeaponExpMaterials(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ExpMaterial)
	fc.Result = res
	return ec.marshalNExpMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpMaterialᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_weapons(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_weapons_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Weapons(rctx, args["lang"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Weapon)
	fc.Result = res
	return ec.marshalNWeapon2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_weapon(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_weapon_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Weapon(rctx, args["lang"].(string), args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Weapon)
	fc.Result = res
	return ec.marshalNWeapon2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeapon(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_calculateCharacterLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_calculateCharacterLevel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CalculateCharacterLevel(rctx, args["characterId"].(string), args["lang"].(string), args["params"].(model.CalculateCharacterParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CalculationCharacterResult)
	fc.Result = res
	return ec.marshalNCalculationCharacterResult2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationCharacterResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_calculateWeaponLevel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_calculateWeaponLevel_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CalculateWeaponLevel(rctx, args["lang"].(string), args["weaponId"].(string), args["params"].(model.CalculateWeaponParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CalculationItemResult)
	fc.Result = res
	return ec.marshalNCalculationItemResult2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationItemResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_id(ctx context.Context, field graphql.CollectedField, obj *model.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_name(ctx context.Context, field graphql.CollectedField, obj *model.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleBait_id(ctx context.Context, field graphql.CollectedField, obj *model.SimpleBait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SimpleBait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleBait_name(ctx context.Context, field graphql.CollectedField, obj *model.SimpleBait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SimpleBait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SimpleBait_rarity(ctx context.Context, field graphql.CollectedField, obj *model.SimpleBait) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SimpleBait",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Skill_id(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Skill_name(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Skill_description(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Skill_info(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Skill_attributes(ctx context.Context, field graphql.CollectedField, obj *model.Skill) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Skill",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attributes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SkillAttribute)
	fc.Result = res
	return ec.marshalOSkillAttribute2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkillAttribute(ctx, field.Selections, res)
}

func (ec *executionContext) _SkillAttribute_label(ctx context.Context, field graphql.CollectedField, obj *model.SkillAttribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SkillAttribute",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SkillAttribute_values(ctx context.Context, field graphql.CollectedField, obj *model.SkillAttribute) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SkillAttribute",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _StatLevel_ascension(ctx context.Context, field graphql.CollectedField, obj *model.StatLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ascension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _StatLevel_level(ctx context.Context, field graphql.CollectedField, obj *model.StatLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _StatLevel_primary(ctx context.Context, field graphql.CollectedField, obj *model.StatLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _StatLevel_secondary(ctx context.Context, field graphql.CollectedField, obj *model.StatLevel) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StatLevel",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secondary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_source(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_location(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_craft(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Craft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CraftTalentLvlUp)
	fc.Result = res
	return ec.marshalOCraftTalentLvlUp2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftTalentLvlUp(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_domain(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentLvlUpMaterial_days(ctx context.Context, field graphql.CollectedField, obj *model.TalentLvlUpMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentLvlUpMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Days, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentMaterial_level(ctx context.Context, field graphql.CollectedField, obj *model.TalentMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentMaterial_cost(ctx context.Context, field graphql.CollectedField, obj *model.TalentMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TalentMaterial_items(ctx context.Context, field graphql.CollectedField, obj *model.TalentMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TalentMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AscensionMaterial)
	fc.Result = res
	return ec.marshalOAscensionMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_id(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_name(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_description(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_rarity(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_type(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_domain(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_passive(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Passive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_bonus(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bonus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_stats(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.WeaponStat)
	fc.Result = res
	return ec.marshalOWeaponStat2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponStat(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_ascensions(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ascensions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.WeaponAscension)
	fc.Result = res
	return ec.marshalOWeaponAscension2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponAscension(ctx, field.Selections, res)
}

func (ec *executionContext) _Weapon_refinements(ctx context.Context, field graphql.CollectedField, obj *model.Weapon) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Weapon",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Refinements, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.WeaponRefinement)
	fc.Result = res
	return ec.marshalOWeaponRefinement2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponRefinement(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponAscension_ascension(ctx context.Context, field graphql.CollectedField, obj *model.WeaponAscension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponAscension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ascension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponAscension_level(ctx context.Context, field graphql.CollectedField, obj *model.WeaponAscension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponAscension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponAscension_cost(ctx context.Context, field graphql.CollectedField, obj *model.WeaponAscension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponAscension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponAscension_materials(ctx context.Context, field graphql.CollectedField, obj *model.WeaponAscension) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponAscension",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Materials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AscensionMaterial)
	fc.Result = res
	return ec.marshalOAscensionMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_source(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_location(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_craft(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Craft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CraftWeaponPrimary)
	fc.Result = res
	return ec.marshalOCraftWeaponPrimary2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftWeaponPrimary(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_domain(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponPrimaryMaterial_days(ctx context.Context, field graphql.CollectedField, obj *model.WeaponPrimaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponPrimaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Days, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponRefinement_refinement(ctx context.Context, field graphql.CollectedField, obj *model.WeaponRefinement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponRefinement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Refinement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponRefinement_desc(ctx context.Context, field graphql.CollectedField, obj *model.WeaponRefinement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponRefinement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Desc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponSecondaryMaterial_id(ctx context.Context, field graphql.CollectedField, obj *model.WeaponSecondaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponSecondaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponSecondaryMaterial_name(ctx context.Context, field graphql.CollectedField, obj *model.WeaponSecondaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponSecondaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponSecondaryMaterial_description(ctx context.Context, field graphql.CollectedField, obj *model.WeaponSecondaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponSecondaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponSecondaryMaterial_source(ctx context.Context, field graphql.CollectedField, obj *model.WeaponSecondaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponSecondaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponSecondaryMaterial_rarity(ctx context.Context, field graphql.CollectedField, obj *model.WeaponSecondaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponSecondaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rarity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponSecondaryMaterial_craft(ctx context.Context, field graphql.CollectedField, obj *model.WeaponSecondaryMaterial) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponSecondaryMaterial",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Craft, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CraftWeaponSecondary)
	fc.Result = res
	return ec.marshalOCraftWeaponSecondary2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftWeaponSecondary(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponStat_primary(ctx context.Context, field graphql.CollectedField, obj *model.WeaponStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponStat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Primary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponStat_secondary(ctx context.Context, field graphql.CollectedField, obj *model.WeaponStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponStat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secondary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WeaponStat_levels(ctx context.Context, field graphql.CollectedField, obj *model.WeaponStat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WeaponStat",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Levels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.StatLevel)
	fc.Result = res
	return ec.marshalOStatLevel2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐStatLevel(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCalculateCharacterParams(ctx context.Context, obj interface{}) (model.CalculateCharacterParams, error) {
	var it model.CalculateCharacterParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "currentLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentLevel"))
			it.CurrentLevel, err = ec.unmarshalOExpLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpLevel(ctx, v)
			if err != nil {
				return it, err
			}
		case "intendedLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("intendedLevel"))
			it.IntendedLevel, err = ec.unmarshalOExpLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpLevel(ctx, v)
			if err != nil {
				return it, err
			}
		case "currentTalentLvl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentTalentLvl"))
			it.CurrentTalentLvl, err = ec.unmarshalOTalentLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentLevel(ctx, v)
			if err != nil {
				return it, err
			}
		case "intendedTalentLvl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("intendedTalentLvl"))
			it.IntendedTalentLvl, err = ec.unmarshalOTalentLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentLevel(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCalculateWeaponParams(ctx context.Context, obj interface{}) (model.CalculateWeaponParams, error) {
	var it model.CalculateWeaponParams
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "currentLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currentLevel"))
			it.CurrentLevel, err = ec.unmarshalNExpLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpLevel(ctx, v)
			if err != nil {
				return it, err
			}
		case "intendedLevel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("intendedLevel"))
			it.IntendedLevel, err = ec.unmarshalNExpLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpLevel(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputExpLevel(ctx context.Context, obj interface{}) (model.ExpLevel, error) {
	var it model.ExpLevel
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "lvl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lvl"))
			it.Lvl, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "asc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asc"))
			it.Asc, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "asclLvl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("asclLvl"))
			it.AsclLvl, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTalentLevel(ctx context.Context, obj interface{}) (model.TalentLevel, error) {
	var it model.TalentLevel
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "aa":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("aa"))
			it.Aa, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "skill":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("skill"))
			it.Skill, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "burst":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("burst"))
			it.Burst, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var artifactImplementors = []string{"Artifact"}

func (ec *executionContext) _Artifact(ctx context.Context, sel ast.SelectionSet, obj *model.Artifact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Artifact")
		case "id":
			out.Values[i] = ec._Artifact_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Artifact_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "min_rarity":
			out.Values[i] = ec._Artifact_min_rarity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "max_rarity":
			out.Values[i] = ec._Artifact_max_rarity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flower":
			out.Values[i] = ec._Artifact_flower(ctx, field, obj)
		case "plume":
			out.Values[i] = ec._Artifact_plume(ctx, field, obj)
		case "sands":
			out.Values[i] = ec._Artifact_sands(ctx, field, obj)
		case "goblet":
			out.Values[i] = ec._Artifact_goblet(ctx, field, obj)
		case "circlet":
			out.Values[i] = ec._Artifact_circlet(ctx, field, obj)
		case "one_pc":
			out.Values[i] = ec._Artifact_one_pc(ctx, field, obj)
		case "two_pc":
			out.Values[i] = ec._Artifact_two_pc(ctx, field, obj)
		case "four_pc":
			out.Values[i] = ec._Artifact_four_pc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var artifactSetImplementors = []string{"ArtifactSet"}

func (ec *executionContext) _ArtifactSet(ctx context.Context, sel ast.SelectionSet, obj *model.ArtifactSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, artifactSetImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ArtifactSet")
		case "id":
			out.Values[i] = ec._ArtifactSet_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ArtifactSet_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ArtifactSet_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ascensionImplementors = []string{"Ascension"}

func (ec *executionContext) _Ascension(ctx context.Context, sel ast.SelectionSet, obj *model.Ascension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ascensionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ascension")
		case "ascension":
			out.Values[i] = ec._Ascension_ascension(ctx, field, obj)
		case "level":
			out.Values[i] = ec._Ascension_level(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._Ascension_cost(ctx, field, obj)
		case "mat_one":
			out.Values[i] = ec._Ascension_mat_one(ctx, field, obj)
		case "mat_two":
			out.Values[i] = ec._Ascension_mat_two(ctx, field, obj)
		case "mat_three":
			out.Values[i] = ec._Ascension_mat_three(ctx, field, obj)
		case "mat_four":
			out.Values[i] = ec._Ascension_mat_four(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ascensionMaterialImplementors = []string{"AscensionMaterial"}

func (ec *executionContext) _AscensionMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.AscensionMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ascensionMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AscensionMaterial")
		case "id":
			out.Values[i] = ec._AscensionMaterial_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AscensionMaterial_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			out.Values[i] = ec._AscensionMaterial_amount(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._AscensionMaterial_rarity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var baitImplementors = []string{"Bait"}

func (ec *executionContext) _Bait(ctx context.Context, sel ast.SelectionSet, obj *model.Bait) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, baitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Bait")
		case "id":
			out.Values[i] = ec._Bait_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Bait_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Bait_description(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._Bait_rarity(ctx, field, obj)
		case "craft":
			out.Values[i] = ec._Bait_craft(ctx, field, obj)
		case "fish":
			out.Values[i] = ec._Bait_fish(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var calculationCharacterResultImplementors = []string{"CalculationCharacterResult"}

func (ec *executionContext) _CalculationCharacterResult(ctx context.Context, sel ast.SelectionSet, obj *model.CalculationCharacterResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, calculationCharacterResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CalculationCharacterResult")
		case "expWasted":
			out.Values[i] = ec._CalculationCharacterResult_expWasted(ctx, field, obj)
		case "items":
			out.Values[i] = ec._CalculationCharacterResult_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var calculationItemResultImplementors = []string{"CalculationItemResult"}

func (ec *executionContext) _CalculationItemResult(ctx context.Context, sel ast.SelectionSet, obj *model.CalculationItemResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, calculationItemResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CalculationItemResult")
		case "id":
			out.Values[i] = ec._CalculationItemResult_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "img":
			out.Values[i] = ec._CalculationItemResult_img(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._CalculationItemResult_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			out.Values[i] = ec._CalculationItemResult_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var characterImplementors = []string{"Character"}

func (ec *executionContext) _Character(ctx context.Context, sel ast.SelectionSet, obj *model.Character) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, characterImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Character")
		case "id":
			out.Values[i] = ec._Character_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Character_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Character_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Character_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weapon_type":
			out.Values[i] = ec._Character_weapon_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "element":
			out.Values[i] = ec._Character_element(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gender":
			out.Values[i] = ec._Character_gender(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "substat":
			out.Values[i] = ec._Character_substat(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "affiliation":
			out.Values[i] = ec._Character_affiliation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "region":
			out.Values[i] = ec._Character_region(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rarity":
			out.Values[i] = ec._Character_rarity(ctx, field, obj)
		case "birthday":
			out.Values[i] = ec._Character_birthday(ctx, field, obj)
		case "constellation":
			out.Values[i] = ec._Character_constellation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "domain":
			out.Values[i] = ec._Character_domain(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cv":
			out.Values[i] = ec._Character_cv(ctx, field, obj)
		case "skills":
			out.Values[i] = ec._Character_skills(ctx, field, obj)
		case "passives":
			out.Values[i] = ec._Character_passives(ctx, field, obj)
		case "constellations":
			out.Values[i] = ec._Character_constellations(ctx, field, obj)
		case "ascension":
			out.Values[i] = ec._Character_ascension(ctx, field, obj)
		case "talent_materials":
			out.Values[i] = ec._Character_talent_materials(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var characterFoodImplementors = []string{"CharacterFood"}

func (ec *executionContext) _CharacterFood(ctx context.Context, sel ast.SelectionSet, obj *model.CharacterFood) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, characterFoodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterFood")
		case "id":
			out.Values[i] = ec._CharacterFood_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CharacterFood_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var characterVoiceImplementors = []string{"CharacterVoice"}

func (ec *executionContext) _CharacterVoice(ctx context.Context, sel ast.SelectionSet, obj *model.CharacterVoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, characterVoiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CharacterVoice")
		case "english":
			out.Values[i] = ec._CharacterVoice_english(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "chinese":
			out.Values[i] = ec._CharacterVoice_chinese(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "japanese":
			out.Values[i] = ec._CharacterVoice_japanese(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "korean":
			out.Values[i] = ec._CharacterVoice_korean(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commonMaterialImplementors = []string{"CommonMaterial"}

func (ec *executionContext) _CommonMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.CommonMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commonMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommonMaterial")
		case "id":
			out.Values[i] = ec._CommonMaterial_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CommonMaterial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._CommonMaterial_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._CommonMaterial_source(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._CommonMaterial_rarity(ctx, field, obj)
		case "craft":
			out.Values[i] = ec._CommonMaterial_craft(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commonMaterialCraftImplementors = []string{"CommonMaterialCraft"}

func (ec *executionContext) _CommonMaterialCraft(ctx context.Context, sel ast.SelectionSet, obj *model.CommonMaterialCraft) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commonMaterialCraftImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommonMaterialCraft")
		case "cost":
			out.Values[i] = ec._CommonMaterialCraft_cost(ctx, field, obj)
		case "items":
			out.Values[i] = ec._CommonMaterialCraft_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commonMaterialItemImplementors = []string{"CommonMaterialItem"}

func (ec *executionContext) _CommonMaterialItem(ctx context.Context, sel ast.SelectionSet, obj *model.CommonMaterialItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commonMaterialItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CommonMaterialItem")
		case "id":
			out.Values[i] = ec._CommonMaterialItem_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CommonMaterialItem_name(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._CommonMaterialItem_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var constellationImplementors = []string{"Constellation"}

func (ec *executionContext) _Constellation(ctx context.Context, sel ast.SelectionSet, obj *model.Constellation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, constellationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Constellation")
		case "id":
			out.Values[i] = ec._Constellation_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Constellation_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Constellation_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "level":
			out.Values[i] = ec._Constellation_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var craftImplementors = []string{"Craft"}

func (ec *executionContext) _Craft(ctx context.Context, sel ast.SelectionSet, obj *model.Craft) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, craftImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Craft")
		case "items":
			out.Values[i] = ec._Craft_items(ctx, field, obj)
		case "result":
			out.Values[i] = ec._Craft_result(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var craftItemImplementors = []string{"CraftItem"}

func (ec *executionContext) _CraftItem(ctx context.Context, sel ast.SelectionSet, obj *model.CraftItem) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, craftItemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CraftItem")
		case "id":
			out.Values[i] = ec._CraftItem_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CraftItem_name(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._CraftItem_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var craftJewelImplementors = []string{"CraftJewel"}

func (ec *executionContext) _CraftJewel(ctx context.Context, sel ast.SelectionSet, obj *model.CraftJewel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, craftJewelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CraftJewel")
		case "cost":
			out.Values[i] = ec._CraftJewel_cost(ctx, field, obj)
		case "items":
			out.Values[i] = ec._CraftJewel_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var craftPotionImplementors = []string{"CraftPotion"}

func (ec *executionContext) _CraftPotion(ctx context.Context, sel ast.SelectionSet, obj *model.CraftPotion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, craftPotionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CraftPotion")
		case "cost":
			out.Values[i] = ec._CraftPotion_cost(ctx, field, obj)
		case "items":
			out.Values[i] = ec._CraftPotion_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var craftTalentLvlUpImplementors = []string{"CraftTalentLvlUp"}

func (ec *executionContext) _CraftTalentLvlUp(ctx context.Context, sel ast.SelectionSet, obj *model.CraftTalentLvlUp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, craftTalentLvlUpImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CraftTalentLvlUp")
		case "cost":
			out.Values[i] = ec._CraftTalentLvlUp_cost(ctx, field, obj)
		case "items":
			out.Values[i] = ec._CraftTalentLvlUp_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var craftWeaponPrimaryImplementors = []string{"CraftWeaponPrimary"}

func (ec *executionContext) _CraftWeaponPrimary(ctx context.Context, sel ast.SelectionSet, obj *model.CraftWeaponPrimary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, craftWeaponPrimaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CraftWeaponPrimary")
		case "cost":
			out.Values[i] = ec._CraftWeaponPrimary_cost(ctx, field, obj)
		case "items":
			out.Values[i] = ec._CraftWeaponPrimary_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var craftWeaponSecondaryImplementors = []string{"CraftWeaponSecondary"}

func (ec *executionContext) _CraftWeaponSecondary(ctx context.Context, sel ast.SelectionSet, obj *model.CraftWeaponSecondary) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, craftWeaponSecondaryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CraftWeaponSecondary")
		case "cost":
			out.Values[i] = ec._CraftWeaponSecondary_cost(ctx, field, obj)
		case "items":
			out.Values[i] = ec._CraftWeaponSecondary_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var elementalStoneMaterialImplementors = []string{"ElementalStoneMaterial"}

func (ec *executionContext) _ElementalStoneMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.ElementalStoneMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, elementalStoneMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElementalStoneMaterial")
		case "id":
			out.Values[i] = ec._ElementalStoneMaterial_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ElementalStoneMaterial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._ElementalStoneMaterial_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._ElementalStoneMaterial_source(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._ElementalStoneMaterial_rarity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var expMaterialImplementors = []string{"ExpMaterial"}

func (ec *executionContext) _ExpMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.ExpMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, expMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ExpMaterial")
		case "id":
			out.Values[i] = ec._ExpMaterial_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ExpMaterial_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._ExpMaterial_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rarity":
			out.Values[i] = ec._ExpMaterial_rarity(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "exp":
			out.Values[i] = ec._ExpMaterial_exp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fishImplementors = []string{"Fish"}

func (ec *executionContext) _Fish(ctx context.Context, sel ast.SelectionSet, obj *model.Fish) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fishImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fish")
		case "id":
			out.Values[i] = ec._Fish_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Fish_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Fish_description(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._Fish_rarity(ctx, field, obj)
		case "source":
			out.Values[i] = ec._Fish_source(ctx, field, obj)
		case "bait":
			out.Values[i] = ec._Fish_bait(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fishBaitImplementors = []string{"FishBait"}

func (ec *executionContext) _FishBait(ctx context.Context, sel ast.SelectionSet, obj *model.FishBait) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fishBaitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FishBait")
		case "id":
			out.Values[i] = ec._FishBait_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._FishBait_name(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._FishBait_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fishingRodImplementors = []string{"FishingRod"}

func (ec *executionContext) _FishingRod(ctx context.Context, sel ast.SelectionSet, obj *model.FishingRod) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fishingRodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FishingRod")
		case "id":
			out.Values[i] = ec._FishingRod_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._FishingRod_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._FishingRod_description(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._FishingRod_rarity(ctx, field, obj)
		case "source":
			out.Values[i] = ec._FishingRod_source(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var foodImplementors = []string{"Food"}

func (ec *executionContext) _Food(ctx context.Context, sel ast.SelectionSet, obj *model.Food) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, foodImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Food")
		case "id":
			out.Values[i] = ec._Food_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Food_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Food_description(ctx, field, obj)
		case "ingredients":
			out.Values[i] = ec._Food_ingredients(ctx, field, obj)
		case "dish_type":
			out.Values[i] = ec._Food_dish_type(ctx, field, obj)
		case "results":
			out.Values[i] = ec._Food_results(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._Food_rarity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var foodResultImplementors = []string{"FoodResult"}

func (ec *executionContext) _FoodResult(ctx context.Context, sel ast.SelectionSet, obj *model.FoodResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, foodResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FoodResult")
		case "normal":
			out.Values[i] = ec._FoodResult_normal(ctx, field, obj)
		case "delicious":
			out.Values[i] = ec._FoodResult_delicious(ctx, field, obj)
		case "suspicious":
			out.Values[i] = ec._FoodResult_suspicious(ctx, field, obj)
		case "special":
			out.Values[i] = ec._FoodResult_special(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var foodSpecialImplementors = []string{"FoodSpecial"}

func (ec *executionContext) _FoodSpecial(ctx context.Context, sel ast.SelectionSet, obj *model.FoodSpecial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, foodSpecialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FoodSpecial")
		case "name":
			out.Values[i] = ec._FoodSpecial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._FoodSpecial_description(ctx, field, obj)
		case "effect":
			out.Values[i] = ec._FoodSpecial_effect(ctx, field, obj)
		case "character":
			out.Values[i] = ec._FoodSpecial_character(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var foodTypeImplementors = []string{"FoodType"}

func (ec *executionContext) _FoodType(ctx context.Context, sel ast.SelectionSet, obj *model.FoodType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, foodTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FoodType")
		case "name":
			out.Values[i] = ec._FoodType_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._FoodType_description(ctx, field, obj)
		case "effect":
			out.Values[i] = ec._FoodType_effect(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ingredientImplementors = []string{"Ingredient"}

func (ec *executionContext) _Ingredient(ctx context.Context, sel ast.SelectionSet, obj *model.Ingredient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ingredientImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ingredient")
		case "id":
			out.Values[i] = ec._Ingredient_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Ingredient_name(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Ingredient_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ingredientsImplementors = []string{"Ingredients"}

func (ec *executionContext) _Ingredients(ctx context.Context, sel ast.SelectionSet, obj *model.Ingredients) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ingredientsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Ingredients")
		case "id":
			out.Values[i] = ec._Ingredients_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Ingredients_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Ingredients_description(ctx, field, obj)
		case "processing":
			out.Values[i] = ec._Ingredients_processing(ctx, field, obj)
		case "recipes":
			out.Values[i] = ec._Ingredients_recipes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var itemImplementors = []string{"Item"}

func (ec *executionContext) _Item(ctx context.Context, sel ast.SelectionSet, obj *model.Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, itemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Item")
		case "id":
			out.Values[i] = ec._Item_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Item_name(ctx, field, obj)
		case "amount":
			out.Values[i] = ec._Item_amount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var jewelMaterialImplementors = []string{"JewelMaterial"}

func (ec *executionContext) _JewelMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.JewelMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jewelMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JewelMaterial")
		case "id":
			out.Values[i] = ec._JewelMaterial_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._JewelMaterial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._JewelMaterial_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._JewelMaterial_source(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._JewelMaterial_rarity(ctx, field, obj)
		case "craft":
			out.Values[i] = ec._JewelMaterial_craft(ctx, field, obj)
		case "convert":
			out.Values[i] = ec._JewelMaterial_convert(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var localMaterialImplementors = []string{"LocalMaterial"}

func (ec *executionContext) _LocalMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.LocalMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, localMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LocalMaterial")
		case "id":
			out.Values[i] = ec._LocalMaterial_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._LocalMaterial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._LocalMaterial_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._LocalMaterial_source(ctx, field, obj)
		case "location":
			out.Values[i] = ec._LocalMaterial_location(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var passiveImplementors = []string{"Passive"}

func (ec *executionContext) _Passive(ctx context.Context, sel ast.SelectionSet, obj *model.Passive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, passiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Passive")
		case "id":
			out.Values[i] = ec._Passive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Passive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Passive_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "level":
			out.Values[i] = ec._Passive_level(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var potionImplementors = []string{"Potion"}

func (ec *executionContext) _Potion(ctx context.Context, sel ast.SelectionSet, obj *model.Potion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, potionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Potion")
		case "id":
			out.Values[i] = ec._Potion_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Potion_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Potion_description(ctx, field, obj)
		case "effect":
			out.Values[i] = ec._Potion_effect(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._Potion_rarity(ctx, field, obj)
		case "craft":
			out.Values[i] = ec._Potion_craft(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "artifacts":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_artifacts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "artifact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_artifact(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "characters":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_characters(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "character":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_character(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "characterExpMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_characterExpMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commonMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commonMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "commonMaterial":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_commonMaterial(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "elementalStoneMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_elementalStoneMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "elementalStoneMaterial":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_elementalStoneMaterial(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fish":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fish(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fishingRods":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fishingRods(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "baits":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_baits(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "food":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_food(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ingredients":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ingredients(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "jewelMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_jewelMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "localMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_localMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "potions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_potions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "talentLvlUpMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_talentLvlUpMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weaponPrimaryMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_weaponPrimaryMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weaponSecondaryMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_weaponSecondaryMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weaponExpMaterials":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_weaponExpMaterials(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weapons":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_weapons(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "weapon":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_weapon(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "calculateCharacterLevel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_calculateCharacterLevel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "calculateWeaponLevel":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_calculateWeaponLevel(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeImplementors = []string{"Recipe"}

func (ec *executionContext) _Recipe(ctx context.Context, sel ast.SelectionSet, obj *model.Recipe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Recipe")
		case "id":
			out.Values[i] = ec._Recipe_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Recipe_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var simpleBaitImplementors = []string{"SimpleBait"}

func (ec *executionContext) _SimpleBait(ctx context.Context, sel ast.SelectionSet, obj *model.SimpleBait) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, simpleBaitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SimpleBait")
		case "id":
			out.Values[i] = ec._SimpleBait_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SimpleBait_name(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._SimpleBait_rarity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillImplementors = []string{"Skill"}

func (ec *executionContext) _Skill(ctx context.Context, sel ast.SelectionSet, obj *model.Skill) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Skill")
		case "id":
			out.Values[i] = ec._Skill_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Skill_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Skill_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "info":
			out.Values[i] = ec._Skill_info(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attributes":
			out.Values[i] = ec._Skill_attributes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var skillAttributeImplementors = []string{"SkillAttribute"}

func (ec *executionContext) _SkillAttribute(ctx context.Context, sel ast.SelectionSet, obj *model.SkillAttribute) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, skillAttributeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SkillAttribute")
		case "label":
			out.Values[i] = ec._SkillAttribute_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "values":
			out.Values[i] = ec._SkillAttribute_values(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var statLevelImplementors = []string{"StatLevel"}

func (ec *executionContext) _StatLevel(ctx context.Context, sel ast.SelectionSet, obj *model.StatLevel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, statLevelImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StatLevel")
		case "ascension":
			out.Values[i] = ec._StatLevel_ascension(ctx, field, obj)
		case "level":
			out.Values[i] = ec._StatLevel_level(ctx, field, obj)
		case "primary":
			out.Values[i] = ec._StatLevel_primary(ctx, field, obj)
		case "secondary":
			out.Values[i] = ec._StatLevel_secondary(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var talentLvlUpMaterialImplementors = []string{"TalentLvlUpMaterial"}

func (ec *executionContext) _TalentLvlUpMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.TalentLvlUpMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, talentLvlUpMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TalentLvlUpMaterial")
		case "id":
			out.Values[i] = ec._TalentLvlUpMaterial_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._TalentLvlUpMaterial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._TalentLvlUpMaterial_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._TalentLvlUpMaterial_source(ctx, field, obj)
		case "location":
			out.Values[i] = ec._TalentLvlUpMaterial_location(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._TalentLvlUpMaterial_rarity(ctx, field, obj)
		case "craft":
			out.Values[i] = ec._TalentLvlUpMaterial_craft(ctx, field, obj)
		case "domain":
			out.Values[i] = ec._TalentLvlUpMaterial_domain(ctx, field, obj)
		case "days":
			out.Values[i] = ec._TalentLvlUpMaterial_days(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var talentMaterialImplementors = []string{"TalentMaterial"}

func (ec *executionContext) _TalentMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.TalentMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, talentMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TalentMaterial")
		case "level":
			out.Values[i] = ec._TalentMaterial_level(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._TalentMaterial_cost(ctx, field, obj)
		case "items":
			out.Values[i] = ec._TalentMaterial_items(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var weaponImplementors = []string{"Weapon"}

func (ec *executionContext) _Weapon(ctx context.Context, sel ast.SelectionSet, obj *model.Weapon) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weaponImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Weapon")
		case "id":
			out.Values[i] = ec._Weapon_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Weapon_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Weapon_description(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._Weapon_rarity(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Weapon_type(ctx, field, obj)
		case "domain":
			out.Values[i] = ec._Weapon_domain(ctx, field, obj)
		case "passive":
			out.Values[i] = ec._Weapon_passive(ctx, field, obj)
		case "bonus":
			out.Values[i] = ec._Weapon_bonus(ctx, field, obj)
		case "stats":
			out.Values[i] = ec._Weapon_stats(ctx, field, obj)
		case "ascensions":
			out.Values[i] = ec._Weapon_ascensions(ctx, field, obj)
		case "refinements":
			out.Values[i] = ec._Weapon_refinements(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var weaponAscensionImplementors = []string{"WeaponAscension"}

func (ec *executionContext) _WeaponAscension(ctx context.Context, sel ast.SelectionSet, obj *model.WeaponAscension) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weaponAscensionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeaponAscension")
		case "ascension":
			out.Values[i] = ec._WeaponAscension_ascension(ctx, field, obj)
		case "level":
			out.Values[i] = ec._WeaponAscension_level(ctx, field, obj)
		case "cost":
			out.Values[i] = ec._WeaponAscension_cost(ctx, field, obj)
		case "materials":
			out.Values[i] = ec._WeaponAscension_materials(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var weaponPrimaryMaterialImplementors = []string{"WeaponPrimaryMaterial"}

func (ec *executionContext) _WeaponPrimaryMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.WeaponPrimaryMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weaponPrimaryMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeaponPrimaryMaterial")
		case "id":
			out.Values[i] = ec._WeaponPrimaryMaterial_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._WeaponPrimaryMaterial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._WeaponPrimaryMaterial_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._WeaponPrimaryMaterial_source(ctx, field, obj)
		case "location":
			out.Values[i] = ec._WeaponPrimaryMaterial_location(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._WeaponPrimaryMaterial_rarity(ctx, field, obj)
		case "craft":
			out.Values[i] = ec._WeaponPrimaryMaterial_craft(ctx, field, obj)
		case "domain":
			out.Values[i] = ec._WeaponPrimaryMaterial_domain(ctx, field, obj)
		case "days":
			out.Values[i] = ec._WeaponPrimaryMaterial_days(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var weaponRefinementImplementors = []string{"WeaponRefinement"}

func (ec *executionContext) _WeaponRefinement(ctx context.Context, sel ast.SelectionSet, obj *model.WeaponRefinement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weaponRefinementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeaponRefinement")
		case "refinement":
			out.Values[i] = ec._WeaponRefinement_refinement(ctx, field, obj)
		case "desc":
			out.Values[i] = ec._WeaponRefinement_desc(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var weaponSecondaryMaterialImplementors = []string{"WeaponSecondaryMaterial"}

func (ec *executionContext) _WeaponSecondaryMaterial(ctx context.Context, sel ast.SelectionSet, obj *model.WeaponSecondaryMaterial) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weaponSecondaryMaterialImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeaponSecondaryMaterial")
		case "id":
			out.Values[i] = ec._WeaponSecondaryMaterial_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._WeaponSecondaryMaterial_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec._WeaponSecondaryMaterial_description(ctx, field, obj)
		case "source":
			out.Values[i] = ec._WeaponSecondaryMaterial_source(ctx, field, obj)
		case "rarity":
			out.Values[i] = ec._WeaponSecondaryMaterial_rarity(ctx, field, obj)
		case "craft":
			out.Values[i] = ec._WeaponSecondaryMaterial_craft(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var weaponStatImplementors = []string{"WeaponStat"}

func (ec *executionContext) _WeaponStat(ctx context.Context, sel ast.SelectionSet, obj *model.WeaponStat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weaponStatImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeaponStat")
		case "primary":
			out.Values[i] = ec._WeaponStat_primary(ctx, field, obj)
		case "secondary":
			out.Values[i] = ec._WeaponStat_secondary(ctx, field, obj)
		case "levels":
			out.Values[i] = ec._WeaponStat_levels(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNArtifact2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifact(ctx context.Context, sel ast.SelectionSet, v model.Artifact) graphql.Marshaler {
	return ec._Artifact(ctx, sel, &v)
}

func (ec *executionContext) marshalNArtifact2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Artifact) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNArtifact2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifact(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNArtifact2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifact(ctx context.Context, sel ast.SelectionSet, v *model.Artifact) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Artifact(ctx, sel, v)
}

func (ec *executionContext) marshalNBait2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐBaitᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Bait) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBait2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐBait(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNBait2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐBait(ctx context.Context, sel ast.SelectionSet, v *model.Bait) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Bait(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNCalculateCharacterParams2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculateCharacterParams(ctx context.Context, v interface{}) (model.CalculateCharacterParams, error) {
	res, err := ec.unmarshalInputCalculateCharacterParams(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCalculateWeaponParams2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculateWeaponParams(ctx context.Context, v interface{}) (model.CalculateWeaponParams, error) {
	res, err := ec.unmarshalInputCalculateWeaponParams(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCalculationCharacterResult2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationCharacterResult(ctx context.Context, sel ast.SelectionSet, v model.CalculationCharacterResult) graphql.Marshaler {
	return ec._CalculationCharacterResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNCalculationCharacterResult2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationCharacterResult(ctx context.Context, sel ast.SelectionSet, v *model.CalculationCharacterResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CalculationCharacterResult(ctx, sel, v)
}

func (ec *executionContext) marshalNCalculationItemResult2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationItemResult(ctx context.Context, sel ast.SelectionSet, v []*model.CalculationItemResult) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCalculationItemResult2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationItemResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNCharacter2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacter(ctx context.Context, sel ast.SelectionSet, v model.Character) graphql.Marshaler {
	return ec._Character(ctx, sel, &v)
}

func (ec *executionContext) marshalNCharacter2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacterᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Character) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCharacter2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCharacter2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacter(ctx context.Context, sel ast.SelectionSet, v *model.Character) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Character(ctx, sel, v)
}

func (ec *executionContext) marshalNCommonMaterial2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterial(ctx context.Context, sel ast.SelectionSet, v model.CommonMaterial) graphql.Marshaler {
	return ec._CommonMaterial(ctx, sel, &v)
}

func (ec *executionContext) marshalNCommonMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.CommonMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCommonMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNCommonMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterial(ctx context.Context, sel ast.SelectionSet, v *model.CommonMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CommonMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalNElementalStoneMaterial2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐElementalStoneMaterial(ctx context.Context, sel ast.SelectionSet, v model.ElementalStoneMaterial) graphql.Marshaler {
	return ec._ElementalStoneMaterial(ctx, sel, &v)
}

func (ec *executionContext) marshalNElementalStoneMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐElementalStoneMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ElementalStoneMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNElementalStoneMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐElementalStoneMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNElementalStoneMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐElementalStoneMaterial(ctx context.Context, sel ast.SelectionSet, v *model.ElementalStoneMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ElementalStoneMaterial(ctx, sel, v)
}

func (ec *executionContext) unmarshalNExpLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpLevel(ctx context.Context, v interface{}) (*model.ExpLevel, error) {
	res, err := ec.unmarshalInputExpLevel(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNExpMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ExpMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNExpMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNExpMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpMaterial(ctx context.Context, sel ast.SelectionSet, v *model.ExpMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ExpMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalNFish2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Fish) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFish2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFish(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFish2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFish(ctx context.Context, sel ast.SelectionSet, v *model.Fish) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Fish(ctx, sel, v)
}

func (ec *executionContext) marshalNFishingRod2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishingRodᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FishingRod) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFishingRod2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishingRod(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFishingRod2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishingRod(ctx context.Context, sel ast.SelectionSet, v *model.FishingRod) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FishingRod(ctx, sel, v)
}

func (ec *executionContext) marshalNFood2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Food) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFood2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFood(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNFood2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFood(ctx context.Context, sel ast.SelectionSet, v *model.Food) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Food(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNIngredient2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredientᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Ingredient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNIngredient2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNIngredient2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredient(ctx context.Context, sel ast.SelectionSet, v *model.Ingredient) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Ingredient(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNJewelMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐJewelMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.JewelMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNJewelMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐJewelMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNJewelMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐJewelMaterial(ctx context.Context, sel ast.SelectionSet, v *model.JewelMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._JewelMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalNLocalMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐLocalMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.LocalMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLocalMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐLocalMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLocalMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐLocalMaterial(ctx context.Context, sel ast.SelectionSet, v *model.LocalMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LocalMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalNPotion2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPotionᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Potion) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPotion2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPotion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNPotion2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPotion(ctx context.Context, sel ast.SelectionSet, v *model.Potion) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Potion(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTalentLvlUpMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentLvlUpMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.TalentLvlUpMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTalentLvlUpMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentLvlUpMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNTalentLvlUpMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentLvlUpMaterial(ctx context.Context, sel ast.SelectionSet, v *model.TalentLvlUpMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TalentLvlUpMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalNWeapon2githubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeapon(ctx context.Context, sel ast.SelectionSet, v model.Weapon) graphql.Marshaler {
	return ec._Weapon(ctx, sel, &v)
}

func (ec *executionContext) marshalNWeapon2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Weapon) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWeapon2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeapon(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWeapon2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeapon(ctx context.Context, sel ast.SelectionSet, v *model.Weapon) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Weapon(ctx, sel, v)
}

func (ec *executionContext) marshalNWeaponPrimaryMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponPrimaryMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WeaponPrimaryMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWeaponPrimaryMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponPrimaryMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWeaponPrimaryMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponPrimaryMaterial(ctx context.Context, sel ast.SelectionSet, v *model.WeaponPrimaryMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WeaponPrimaryMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalNWeaponSecondaryMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponSecondaryMaterialᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WeaponSecondaryMaterial) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWeaponSecondaryMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponSecondaryMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWeaponSecondaryMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponSecondaryMaterial(ctx context.Context, sel ast.SelectionSet, v *model.WeaponSecondaryMaterial) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WeaponSecondaryMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOArtifactSet2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐArtifactSet(ctx context.Context, sel ast.SelectionSet, v *model.ArtifactSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ArtifactSet(ctx, sel, v)
}

func (ec *executionContext) marshalOAscension2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscension(ctx context.Context, sel ast.SelectionSet, v []*model.Ascension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAscension2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAscension2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscension(ctx context.Context, sel ast.SelectionSet, v *model.Ascension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Ascension(ctx, sel, v)
}

func (ec *executionContext) marshalOAscensionMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx context.Context, sel ast.SelectionSet, v []*model.AscensionMaterial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAscensionMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOAscensionMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐAscensionMaterial(ctx context.Context, sel ast.SelectionSet, v *model.AscensionMaterial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AscensionMaterial(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOCalculationItemResult2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationItemResult(ctx context.Context, sel ast.SelectionSet, v []*model.CalculationItemResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCalculationItemResult2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationItemResult(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCalculationItemResult2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCalculationItemResult(ctx context.Context, sel ast.SelectionSet, v *model.CalculationItemResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CalculationItemResult(ctx, sel, v)
}

func (ec *executionContext) marshalOCharacterFood2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacterFood(ctx context.Context, sel ast.SelectionSet, v *model.CharacterFood) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CharacterFood(ctx, sel, v)
}

func (ec *executionContext) marshalOCharacterVoice2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCharacterVoice(ctx context.Context, sel ast.SelectionSet, v *model.CharacterVoice) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CharacterVoice(ctx, sel, v)
}

func (ec *executionContext) marshalOCommonMaterialCraft2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialCraft(ctx context.Context, sel ast.SelectionSet, v *model.CommonMaterialCraft) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommonMaterialCraft(ctx, sel, v)
}

func (ec *executionContext) marshalOCommonMaterialItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialItem(ctx context.Context, sel ast.SelectionSet, v []*model.CommonMaterialItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCommonMaterialItem2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCommonMaterialItem2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCommonMaterialItem(ctx context.Context, sel ast.SelectionSet, v *model.CommonMaterialItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CommonMaterialItem(ctx, sel, v)
}

func (ec *executionContext) marshalOConstellation2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐConstellation(ctx context.Context, sel ast.SelectionSet, v []*model.Constellation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConstellation2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐConstellation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConstellation2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐConstellation(ctx context.Context, sel ast.SelectionSet, v *model.Constellation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Constellation(ctx, sel, v)
}

func (ec *executionContext) marshalOCraft2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraft(ctx context.Context, sel ast.SelectionSet, v *model.Craft) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Craft(ctx, sel, v)
}

func (ec *executionContext) marshalOCraftItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftItem(ctx context.Context, sel ast.SelectionSet, v []*model.CraftItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCraftItem2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCraftItem2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftItem(ctx context.Context, sel ast.SelectionSet, v *model.CraftItem) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CraftItem(ctx, sel, v)
}

func (ec *executionContext) marshalOCraftJewel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftJewel(ctx context.Context, sel ast.SelectionSet, v *model.CraftJewel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CraftJewel(ctx, sel, v)
}

func (ec *executionContext) marshalOCraftPotion2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftPotion(ctx context.Context, sel ast.SelectionSet, v *model.CraftPotion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CraftPotion(ctx, sel, v)
}

func (ec *executionContext) marshalOCraftTalentLvlUp2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftTalentLvlUp(ctx context.Context, sel ast.SelectionSet, v *model.CraftTalentLvlUp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CraftTalentLvlUp(ctx, sel, v)
}

func (ec *executionContext) marshalOCraftWeaponPrimary2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftWeaponPrimary(ctx context.Context, sel ast.SelectionSet, v *model.CraftWeaponPrimary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CraftWeaponPrimary(ctx, sel, v)
}

func (ec *executionContext) marshalOCraftWeaponSecondary2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐCraftWeaponSecondary(ctx context.Context, sel ast.SelectionSet, v *model.CraftWeaponSecondary) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CraftWeaponSecondary(ctx, sel, v)
}

func (ec *executionContext) unmarshalOExpLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐExpLevel(ctx context.Context, v interface{}) (*model.ExpLevel, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputExpLevel(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFishBait2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishBait(ctx context.Context, sel ast.SelectionSet, v []*model.FishBait) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFishBait2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishBait(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOFishBait2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFishBait(ctx context.Context, sel ast.SelectionSet, v *model.FishBait) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FishBait(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOFoodResult2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodResult(ctx context.Context, sel ast.SelectionSet, v *model.FoodResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FoodResult(ctx, sel, v)
}

func (ec *executionContext) marshalOFoodSpecial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodSpecial(ctx context.Context, sel ast.SelectionSet, v *model.FoodSpecial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FoodSpecial(ctx, sel, v)
}

func (ec *executionContext) marshalOFoodType2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐFoodType(ctx context.Context, sel ast.SelectionSet, v *model.FoodType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FoodType(ctx, sel, v)
}

func (ec *executionContext) marshalOIngredient2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredient(ctx context.Context, sel ast.SelectionSet, v []*model.Ingredient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIngredient2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOIngredient2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐIngredient(ctx context.Context, sel ast.SelectionSet, v *model.Ingredient) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Ingredient(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚕᚖint(ctx context.Context, v interface{}) ([]*int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOInt2ᚖint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕᚖint(ctx context.Context, sel ast.SelectionSet, v []*int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOInt2ᚖint(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOItem2ᚕᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx context.Context, sel ast.SelectionSet, v [][]*model.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOItem2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx context.Context, sel ast.SelectionSet, v []*model.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOItem2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOItem2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐItem(ctx context.Context, sel ast.SelectionSet, v *model.Item) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Item(ctx, sel, v)
}

func (ec *executionContext) marshalOPassive2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPassive(ctx context.Context, sel ast.SelectionSet, v []*model.Passive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPassive2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPassive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOPassive2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐPassive(ctx context.Context, sel ast.SelectionSet, v *model.Passive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Passive(ctx, sel, v)
}

func (ec *executionContext) marshalORecipe2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐRecipe(ctx context.Context, sel ast.SelectionSet, v []*model.Recipe) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipe2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐRecipe(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORecipe2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐRecipe(ctx context.Context, sel ast.SelectionSet, v *model.Recipe) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Recipe(ctx, sel, v)
}

func (ec *executionContext) marshalOSimpleBait2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSimpleBait(ctx context.Context, sel ast.SelectionSet, v *model.SimpleBait) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SimpleBait(ctx, sel, v)
}

func (ec *executionContext) marshalOSkill2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkill(ctx context.Context, sel ast.SelectionSet, v []*model.Skill) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSkill2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkill(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSkill2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkill(ctx context.Context, sel ast.SelectionSet, v *model.Skill) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Skill(ctx, sel, v)
}

func (ec *executionContext) marshalOSkillAttribute2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkillAttribute(ctx context.Context, sel ast.SelectionSet, v []*model.SkillAttribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSkillAttribute2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkillAttribute(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSkillAttribute2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐSkillAttribute(ctx context.Context, sel ast.SelectionSet, v *model.SkillAttribute) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SkillAttribute(ctx, sel, v)
}

func (ec *executionContext) marshalOStatLevel2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐStatLevel(ctx context.Context, sel ast.SelectionSet, v []*model.StatLevel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOStatLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐStatLevel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOStatLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐStatLevel(ctx context.Context, sel ast.SelectionSet, v *model.StatLevel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._StatLevel(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTalentLevel2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentLevel(ctx context.Context, v interface{}) (*model.TalentLevel, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTalentLevel(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTalentMaterial2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentMaterial(ctx context.Context, sel ast.SelectionSet, v []*model.TalentMaterial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOTalentMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentMaterial(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOTalentMaterial2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐTalentMaterial(ctx context.Context, sel ast.SelectionSet, v *model.TalentMaterial) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._TalentMaterial(ctx, sel, v)
}

func (ec *executionContext) marshalOWeaponAscension2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponAscension(ctx context.Context, sel ast.SelectionSet, v []*model.WeaponAscension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOWeaponAscension2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponAscension(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOWeaponAscension2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponAscension(ctx context.Context, sel ast.SelectionSet, v *model.WeaponAscension) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WeaponAscension(ctx, sel, v)
}

func (ec *executionContext) marshalOWeaponRefinement2ᚕᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponRefinement(ctx context.Context, sel ast.SelectionSet, v []*model.WeaponRefinement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOWeaponRefinement2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponRefinement(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOWeaponRefinement2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponRefinement(ctx context.Context, sel ast.SelectionSet, v *model.WeaponRefinement) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WeaponRefinement(ctx, sel, v)
}

func (ec *executionContext) marshalOWeaponStat2ᚖgithubᚗcomᚋdvaJiᚋgenshinᚑbuildsᚑapiᚋgraphᚋmodelᚐWeaponStat(ctx context.Context, sel ast.SelectionSet, v *model.WeaponStat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WeaponStat(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
